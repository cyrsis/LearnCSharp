#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: f75fc426-1ab1-44f5-820b-c942acedb40e
# Source File: C:\Dropbox\Business Projects\Courses\Pluralsight\Course Authoring\Active Courses\Building a Client Troubleshooting Tool with PowerShell\powershell-building-client-troubleshooting-tool-m4\Demos\GUI Project\HelpDeskTool.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2015 v4.2.99
     Generated on:       2/22/2016 5:59 PM
     Generated by:        Adam Bertram
     Organization:       Adam the Automator, LLC
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2015
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	## UNC share where ancillary files are located
	$toolFileShare = '\\MEMBERSRV1\ToolShare'
	
	function Write-Status
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory)]
			[ValidateNotNullOrEmpty()]
			[string]$Message
		)
		$statusBar1.Text = $Message
	}
	
	function Test-VncInstalled
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory)]
			[ValidateNotNullOrEmpty()]
			[ValidateScript({ Test-Connection -ComputerName $_ -Quiet -Count 1 })]
			[string]$ComputerName
		)
		begin
		{
			$ErrorActionPreference = 'Stop'
			function Get-InstalledSoftware
			{
				<#
				.SYNOPSIS
					Retrieves a list of all software installed
				.EXAMPLE
					Get-InstalledSoftware
					
					This example retrieves all software installed on the local computer
				.PARAMETER Name
					The software title you'd like to limit the query to.
				.PARAMETER Guid
					The software GUID you'e like to limit the query to
				#>
				[CmdletBinding()]
				param (
					
					[Parameter()]
					[ValidateNotNullOrEmpty()]
					[ValidateScript({ Test-Connection -ComputerName $_ -Quiet -Count 1 })]
					[string[]]$ComputerName,
					
					[Parameter()]
					[ValidateNotNullOrEmpty()]
					[System.Management.Automation.PSCredential]$Credential,
					
					[string]$Name,
					
					[ValidatePattern('\b[A-F0-9]{8}(?:-[A-F0-9]{4}){3}-[A-F0-9]{12}\b')]
					[string]$Guid
				)
				process
				{
					try
					{
						$scriptBlock = {
							$UninstallKeys = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall", "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
							New-PSDrive -Name HKU -PSProvider Registry -Root Registry::HKEY_USERS | Out-Null
							$UninstallKeys += Get-ChildItem HKU: | where { $_.Name -match 'S-\d-\d+-(\d+-){1,14}\d+$' } | foreach { "HKU:\$($_.PSChildName)\Software\Microsoft\Windows\CurrentVersion\Uninstall" }
							if (-not $UninstallKeys)
							{
								Write-Warning -Message 'No software registry keys found'
							}
							else
							{
								foreach ($UninstallKey in $UninstallKeys)
								{
									$friendlyNames = @{
										'DisplayName' = 'Name'
										'DisplayVersion' = 'Version'
									}
									Write-Verbose -Message "Checking uninstall key [$($UninstallKey)]"
									if ($PSBoundParameters.ContainsKey('Name'))
									{
										$WhereBlock = { $_.GetValue('DisplayName') -like "$Name*" }
									}
									elseif ($PSBoundParameters.ContainsKey('GUID'))
									{
										$WhereBlock = { $_.PsChildName -eq $Guid }
									}
									else
									{
										$WhereBlock = { $_.GetValue('DisplayName') }
									}
									$SwKeys = Get-ChildItem -Path $UninstallKey -ErrorAction SilentlyContinue | Where-Object $WhereBlock
									if (-not $SwKeys)
									{
										Write-Verbose -Message "No software keys in uninstall key $UninstallKey"
									}
									else
									{
										foreach ($SwKey in $SwKeys)
										{
											$output = @{ }
											foreach ($ValName in $SwKey.GetValueNames())
											{
												if ($ValName -ne 'Version')
												{
													$output.InstallLocation = ''
													if ($ValName -eq 'InstallLocation' -and ($SwKey.GetValue($ValName)) -and (@('C:', 'C:\Windows', 'C:\Windows\System32', 'C:\Windows\SysWOW64') -notcontains $SwKey.GetValue($ValName).TrimEnd('\')))
													{
														$output.InstallLocation = $SwKey.GetValue($ValName).TrimEnd('\')
													}
													[string]$ValData = $SwKey.GetValue($ValName)
													if ($friendlyNames[$ValName])
													{
														$output[$friendlyNames[$ValName]] = $ValData.Trim() ## Some registry values have trailing spaces.
													}
													else
													{
														$output[$ValName] = $ValData.Trim() ## Some registry values trailing spaces
													}
												}
											}
											$output.GUID = ''
											if ($SwKey.PSChildName -match '\b[A-F0-9]{8}(?:-[A-F0-9]{4}){3}-[A-F0-9]{12}\b')
											{
												$output.GUID = $SwKey.PSChildName
											}
											[pscustomobject]$output
										}
									}
								}
							}
						}
						if ($PSBoundParameters.ContainsKey('ComputerName'))
						{
							$icmParams = @{
								'ComputerName' = $ComputerName
								'ScriptBlock' = $scriptBlock
							}
							if ($PSBoundParameters.ContainsKey('Credential'))
							{
								$icmParams.Credential = $Credential
							}
							Invoke-Command @icmParams
						}
						else
						{
							& $scriptBlock
						}
					}
					catch
					{
						Write-Error -Message "Error: $($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)"
					}
				}
			}
		}
		process
		{
			try
			{
				if (Get-InstalledSoftware -ComputerName $ComputerName | where { $_.Name -eq 'UltraVNC' })
				{
					$true
				}
				else
				{
					$false
				}
			}
			catch
			{
				Write-Error $_.Exception.Message
			}
		}
	}
	
	function Deploy-Vnc
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory)]
			[ValidateNotNullOrEmpty()]
			[ValidateScript({ Test-Connection -ComputerName $_ -Quiet -Count 1 })]
			[string]$ComputerName,
			
			[Parameter()]
			[ValidateNotNullOrEmpty()]
			[ValidateScript({ Test-Path -Path $_ -PathType Container })]
			[string]$InstallerFolder = '\\MEMBERSRV1\ToolShare'
		)
		begin
		{
			$ErrorActionPreference = 'Stop'
		}
		process
		{
			try
			{
				## Ensure the C$ share is available
				if (-not (Test-Path -Path "\\$ComputerName\c$"))
				{
					throw "The c`$ share is not available on computer [$($ComputerName)]"
				}
				else
				{
					Write-Verbose -Message "c$ share is available on [$($ComputerName)]"
				}
				
				$installFolderName = $InstallerFolder.Split('\')[-1]
				
				## Check if our installer and INF is already on the remote computer
				if (Test-Path -Path "\\$ComputerName\c$\$installFolderName")
				{
					Write-Verbose -Message "VNC install folder already exists at \\$ComputerName\c$\$installFolderName"
					
					## Generate file hashes for all files within the remote VNC install folder and the files on the remote client.
					$sourceHashes = Get-ChildItem -Path $InstallerFolder | foreach { (Get-FileHash -Path $_.FullName).Hash }
					$destHashes = Get-ChildItem -Path "\\$ComputerName\c$\$installFolderName" | foreach { (Get-FileHash -Path $_.FullName).Hash }
					if (Compare-Object -ReferenceObject $sourceHashes -DifferenceObject $destHashes)
					{
						Write-Verbose -Message 'Remote computer VNC installer contents does not match source. Overwriting...'
						## Copy the VNC installer folder to the remote computer
						Copy-Item -Path $InstallerFolder -Destination "\\$ComputerName\c$" -Recurse
					}
					else
					{
						Write-Verbose -Message 'Remote computer VNC installer contents already exist. No need to copy again.'
					}
				}
				else
				{
					## Copy the VNC installer folder to the remote computer
					Write-Verbose -Message "Copying VNC installer contents to [$($ComputerName)]"
					Copy-Item -Path $InstallerFolder -Destination "\\$ComputerName\c$" -Recurse
				}
				
				## Remotely invoke the VNC installer on the computer
				$localInstallFolder = "C:\$installFolderName".TrimEnd('\')
				$localInstaller = "$localInstallFolder\UltraVNC_Setup.exe"
				$localInfFile = "$localInstallFolder\UltraVNCSilentInstall.inf"
				
				$scriptBlock = {
					Start-Process $using:localInstaller -Args "/verysilent /loadinf=`"$using:localInfFile`"" -Wait -NoNewWindow
				}
				Write-Verbose -Message 'Running VNC installer...'
				Invoke-Command -ComputerName $ComputerName -ScriptBlock $scriptBlock
			}
			catch
			{
				Write-Error $_.Exception.Message
			}
			finally
			{
				$remoteInstallFolder = "\\$ComputerName\c$\$installFolderName"
				Write-Verbose -Message "Cleaning up VNC install bits at [$($remoteInstallFolder)]"
				Remove-Item $remoteInstallFolder -Recurse -ErrorAction Ignore
			}
		}
	}#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonShowServices = New-Object 'System.Windows.Forms.Button'
	$datagridviewServices = New-Object 'System.Windows.Forms.DataGridView'
	$comboboxServices = New-Object 'System.Windows.Forms.ComboBox'
	$buttonConnect = New-Object 'System.Windows.Forms.Button'
	$labelConnectTo = New-Object 'System.Windows.Forms.Label'
	$txtBoxConnect = New-Object 'System.Windows.Forms.TextBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$datagridviewUpdates = New-Object 'System.Windows.Forms.DataGridView'
	$buttonShowUpdates = New-Object 'System.Windows.Forms.Button'
	$statusbar1 = New-Object 'System.Windows.Forms.StatusBar'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$labelVNCStatus = New-Object 'System.Windows.Forms.Label'
	$buttonOpenVNC = New-Object 'System.Windows.Forms.Button'
	$label2 = New-Object 'System.Windows.Forms.Label'
	$buttonDeployVNC = New-Object 'System.Windows.Forms.Button'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$contextmenustripServices = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$enableToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$startToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	
	function Clear-DataGridView
	{
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory)]
			[ValidateNotNullOrEmpty()]
			[System.Windows.Forms.DataGridView]$DataGridView
		)
		
		$DataGridView.DataSource = $null
		$DataGridView.Refresh()
	}
	
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	
	function Load-ListBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
	
		.PARAMETER  ListBox
			The ListBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ListBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ListBox $listBox1 "Red" -Append
			Load-ListBox $listBox1 "White" -Append
			Load-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Load-ListBox $listBox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ListBox]$ListBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$listBox.Items.Clear()	
		}
		
		if($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$listBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)	
		}
	
		$listBox.DisplayMember = $DisplayMember
	}
	
	function Toggle-Buttons
	{
		<#
		.SYNOPSIS
			This function either enables or disables a set of buttons on the current form. It is primarily used to indicate if
			the tool is connected to a client or not.
			
		.EXAMPLE
			PS> Toggle-Buttons -Status $true
		
			This example enables all buttons that attempt to make connections to the client.
			
		.PARAMETER Status
			This is a boolean value that either disables or enables all buttons that attempt to make connections to the client.
		#>
		[CmdletBinding()]
		param
		(
			[Parameter(Mandatory)]
			[ValidateNotNullOrEmpty()]
			[bool]$Status
		)
		$buttonOpenVNC.Enabled = $Status
		$buttonDeployVNC.Enabled = $Status
		#$buttonEventLogs.Enabled = $Status
		$buttonShowUpdates.Enabled = $Status
		$buttonShowServices.Enabled = $Status
	}
	#endregion
	
	$buttonDeployVNC_Click={
		try
		{
			Write-Status -Message 'Deploying VNC...'
			Deploy-VNC -ComputerName $ComputerName
			if (Test-VncInstalled -ComputerName $ComputerName)
			{
				$buttonOpenVNC.Enabled = $true
				$buttonDeployVNC.Enabled = $false
				$labelVNCStatus.Text = 'Installed'
				Write-Status -Message 'Successfully deployed VNC.'
			}
			else
			{
				throw 'VNC deployment failed.'	
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	
	$buttonShowUpdates_Click = {
		try
		{
			Write-Status -Message 'Retrieving installed updates...'
			
			## Get all installed updates from the remote computer but only select the description and hotfixid. These are the only
			## fields we want populated in the datagrid view.
			$updates = Get-HotFix -ComputerName $ComputerName | select description,hotfixid
			
			## Load the results of the Get-Hotfix query.
			Load-DataGridView -DataGridView $datagridviewUpdates -Item $updates
			Write-Status -Message "Successfully retrieved installed updates."
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	
	$buttonOpenVNC_Click= {
		try
		{
			## Always check for any external dependencies you reference before attempting to run them.
			if (-not (Test-Path -Path "$toolFileShare\vncviewer.exe" -PathType Leaf))
			{
				throw "The VNC viewer app at [$toolFileShare\vncviewer.exe] was not found."
			}
			## Open the VNC viewer EXE on the file share. Use the -connect argument to immediately connect to the remote client
			## the tool is connected to.
			& "$toolFileShare\vncviewer.exe" -connect $ComputerName
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	
	$exitToolStripMenuItem_Click={
		## Close the application
		$MainForm.Close()
	}
	
	$buttonConnect_Click={
		try
		{
			if (-not $txtBoxConnect.Text) ## If the Connect text box is empty
			{
				## Rather than simply displaying the connection error in the status bar like all the other errors, you can choose
				## to be more obvious and display a message box. I use message boxes to display more critical errors that will affect
				## the entire tool as a whole.
				[System.Windows.Forms.MessageBox]::Show('No computer specified for connection', 'Invalid input', 0, 16)
				throw 'No computer specified for connection'
			}
			else
			{
				## $computername must be global because I'm going to be referencing it in various functions that will not be in the
				## same scope as the scriptblock we're in now.
				$global:ComputerName = $txtBoxConnect.Text
			}
			
			Write-Status -Message "Testing connectivity..."
			## Test to ensure the remote client can be pinged
			if (-not (Test-Connection -ComputerName $ComputerName -Count 1 -Quiet))
			{
				throw 'Computer is offline or does not exist.'
			}
			## We'll be using PS remoting to invoke a VNC deployment so that functionality must be working.
			elseif ((Invoke-Command -ComputerName $ComputerName -ScriptBlock { hostname }) -ne $ComputerName)
			{
				throw 'Computer cannot be connected to.'
			}
			else
			{
				## If the user connects to one computer and populates various datagrid views and then connects to another remote client
				## we need to make sure the previous client's information is not still displayed.
				$toClearDgvs = $datagridviewServices, $datagridviewUpdates
				foreach ($dgv in $toClearDgvs)
				{
					## Custom function built because more than one datagrid view will need to be cleared.
					Clear-DataGridView -DataGridView $dgv
				}
				
				## This changes the title bar of the form. This is good practice if you need to keep a persistent message up and
				## not be too obtrusive. Knowing what client the user connected to is useful information.
				$MainForm.Text = "Helpdesk Tool - Connected to $ComputerName"
				
				## Because we've chosen to allow the user to query the client's event logs, we need to prepopulate a combobox
				## This saves time when the user does eventually want to view the client's event logs. This retrieves all of the log
				## names and populates them into a combobox.
				Write-Status -Message 'Gathering event log sources...'
				#$eventLogs = (Get-EventLog -ComputerName $ComputerName -LogName *).Log
				#Load-ComboBox -ComboBox $comboboxEventLog -Items $eventLogs
				
				## Test to see if VNC is already installed using the Test-VNCInstalled function inside the VNC.ps1 script.
				## The result of this is reflected in the VNC status label which will indicate "Installed" if it's installed or 
				## "not installed" otherwise.
				Write-Status -Message 'Testing VNC install status...'
				if (Test-VNCInstalled -ComputerName $ComputerName)
				{
					$labelVNCStatus.Text = 'Installed'
					$buttonDeployVNC.Enabled = $false
				}
				else
				{
					$labelVNCStatus.Text = 'Not Installed'
					$buttonOpenVNC.Enabled = $false
				}
				
				## If the client successfully passed all of our prerequisite tests, consider it go to go and enable all of the buttons
				## that can make connections to it.
				Toggle-Buttons -Status $true
				
				## The throw command is typically used for error handling. However, in a GUI, it can also be a great way to simply
				## act as status messaging as well.
				throw "Connected to $ComputerName"
			}
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	
	$MainForm_Load = {
		## Disable all of the buttons until a computer is connected
		Toggle-Buttons -Status $false
	}
	
	$buttonShowServices_Click={
		try
		{
			## The helpdesk needed a way to easily find disabled and stopped Windows services. Depending on what was chosen
			## in the services combo box depends on the FilterScript we'll build to use with Get-Service.
			switch ($comboboxServices.Text)
			{
				'All Services' {
					Write-Status -Message "Retrieving all Windows services..."
					$whereFilter = { $_.Name -ne $null }
				}
				'Disabled Services' {
					Write-Status -Message "Retrieving all disabled Windows services..."
					$whereFilter = { $_.StartMode -eq 'Disabled' }
				}
				'Stopped Services' {
					Write-Status -Message "Retrieving all stopped Windows services..."
					$whereFilter = { $_.State -eq 'Stopped' }
				}
				default
				{
					throw 'Unknown service criteria'
				}
			}
			
			## Query all services with the FilterScript based off of the combo box. We only need to see certain fields in the datagrid
			## view so use Select-Object to only output those.
			$services = Get-WmiObject -ComputerName $ComputerName -Class Win32_Service | where $whereFilter | select displayname, state, startmode | sort displayName
			Load-DataGridView -DataGridView $datagridviewServices -Item $services
			Write-Status -Message "Successfully retrieved Windows services."
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
		
	}
	
	$enableToolStripMenuItem_Click = {
		try
		{
			$serviceName = $datagridviewServices.CurrentRow.Cells[0].Value
			Write-Status -Message "Enabling the $serviceName Windows service..."
			Get-Service -ComputerName $ComputerName -DisplayName $serviceName | Set-Service -StartupType Automatic
			Write-Status -Message "Succesfully enabled the $serviceName Windows service"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
	}
	
	$startToolStripMenuItem_Click = {
		try
		{
			$serviceName = $datagridviewServices.CurrentRow.Cells[0].Value
			Write-Status -Message "Starting the $serviceName Windows service..."
			Get-Service -ComputerName $ComputerName -DisplayName $serviceName | Start-Service
			Write-Status -Message "Succesfully starated the $serviceName Windows service"
		}
		catch
		{
			Write-Status -Message $_.Exception.Message
		}
		
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_datagridviewServices = $datagridviewServices.SelectedCells
		$script:MainForm_comboboxServices = $comboboxServices.Text
		$script:MainForm_comboboxServices_SelectedItem = $comboboxServices.SelectedItem
		$script:MainForm_txtBoxConnect = $txtBoxConnect.Text
		$script:MainForm_datagridviewUpdates = $datagridviewUpdates.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonShowServices.remove_Click($buttonShowServices_Click)
			$buttonConnect.remove_Click($buttonConnect_Click)
			$buttonShowUpdates.remove_Click($buttonShowUpdates_Click)
			$buttonOpenVNC.remove_Click($buttonOpenVNC_Click)
			$buttonDeployVNC.remove_Click($buttonDeployVNC_Click)
			$MainForm.remove_Load($MainForm_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$menustrip1.SuspendLayout()
	$contextmenustripServices.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($groupbox3)
	$MainForm.Controls.Add($buttonConnect)
	$MainForm.Controls.Add($labelConnectTo)
	$MainForm.Controls.Add($txtBoxConnect)
	$MainForm.Controls.Add($groupbox2)
	$MainForm.Controls.Add($statusbar1)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.Controls.Add($menustrip1)
	$MainForm.ClientSize = '994, 605'
	$MainForm.ContextMenuStrip = $contextmenustripServices
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'HelpDesk Tool'
	$MainForm.add_Load($MainForm_Load)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonShowServices)
	$groupbox3.Controls.Add($datagridviewServices)
	$groupbox3.Controls.Add($comboboxServices)
	$groupbox3.Location = '524, 72'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '373, 236'
	$groupbox3.TabIndex = 33
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Windows Services'
	#
	# buttonShowServices
	#
	$buttonShowServices.Location = '167, 30'
	$buttonShowServices.Name = 'buttonShowServices'
	$buttonShowServices.Size = '75, 23'
	$buttonShowServices.TabIndex = 2
	$buttonShowServices.Text = 'Submit'
	$buttonShowServices.UseVisualStyleBackColor = $True
	$buttonShowServices.add_Click($buttonShowServices_Click)
	#
	# datagridviewServices
	#
	$datagridviewServices.AllowUserToAddRows = $False
	$datagridviewServices.AllowUserToDeleteRows = $False
	$datagridviewServices.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewServices.Location = '17, 75'
	$datagridviewServices.Name = 'datagridviewServices'
	$datagridviewServices.ReadOnly = $True
	$datagridviewServices.Size = '350, 150'
	$datagridviewServices.TabIndex = 1
	#
	# comboboxServices
	#
	$comboboxServices.FormattingEnabled = $True
	[void]$comboboxServices.Items.Add('All Services')
	[void]$comboboxServices.Items.Add('Disabled Services')
	[void]$comboboxServices.Items.Add('Stopped Services')
	$comboboxServices.Location = '17, 33'
	$comboboxServices.Name = 'comboboxServices'
	$comboboxServices.Size = '121, 21'
	$comboboxServices.TabIndex = 0
	$comboboxServices.Text = 'All Services'
	#
	# buttonConnect
	#
	$buttonConnect.Location = '199, 32'
	$buttonConnect.Name = 'buttonConnect'
	$buttonConnect.Size = '75, 23'
	$buttonConnect.TabIndex = 30
	$buttonConnect.Text = 'Connect'
	$buttonConnect.UseVisualStyleBackColor = $True
	$buttonConnect.add_Click($buttonConnect_Click)
	#
	# labelConnectTo
	#
	$labelConnectTo.Location = '16, 37'
	$labelConnectTo.Name = 'labelConnectTo'
	$labelConnectTo.Size = '71, 14'
	$labelConnectTo.TabIndex = 27
	$labelConnectTo.Text = 'Connect To :'
	#
	# txtBoxConnect
	#
	$txtBoxConnect.Location = '93, 34'
	$txtBoxConnect.Name = 'txtBoxConnect'
	$txtBoxConnect.Size = '100, 20'
	$txtBoxConnect.TabIndex = 26
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($datagridviewUpdates)
	$groupbox2.Controls.Add($buttonShowUpdates)
	$groupbox2.Location = '16, 72'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '472, 236'
	$groupbox2.TabIndex = 24
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Installed Updates'
	#
	# datagridviewUpdates
	#
	$datagridviewUpdates.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewUpdates.Location = '21, 62'
	$datagridviewUpdates.Name = 'datagridviewUpdates'
	$datagridviewUpdates.Size = '426, 154'
	$datagridviewUpdates.TabIndex = 22
	#
	# buttonShowUpdates
	#
	$buttonShowUpdates.Location = '21, 33'
	$buttonShowUpdates.Name = 'buttonShowUpdates'
	$buttonShowUpdates.Size = '97, 23'
	$buttonShowUpdates.TabIndex = 20
	$buttonShowUpdates.Text = 'Show Updates'
	$buttonShowUpdates.UseVisualStyleBackColor = $True
	$buttonShowUpdates.add_Click($buttonShowUpdates_Click)
	#
	# statusbar1
	#
	$statusbar1.Location = '0, 578'
	$statusbar1.Name = 'statusbar1'
	$statusbar1.Size = '994, 27'
	$statusbar1.TabIndex = 23
	$statusbar1.Text = 'HelpDesk Tool'
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($labelVNCStatus)
	$groupbox1.Controls.Add($buttonOpenVNC)
	$groupbox1.Controls.Add($label2)
	$groupbox1.Controls.Add($buttonDeployVNC)
	$groupbox1.Location = '718, 379'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '200, 91'
	$groupbox1.TabIndex = 15
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'VNC'
	#
	# labelVNCStatus
	#
	$labelVNCStatus.Location = '79, 27'
	$labelVNCStatus.Name = 'labelVNCStatus'
	$labelVNCStatus.Size = '100, 23'
	$labelVNCStatus.TabIndex = 8
	$labelVNCStatus.Text = 'N/A'
	#
	# buttonOpenVNC
	#
	$buttonOpenVNC.Location = '104, 59'
	$buttonOpenVNC.Name = 'buttonOpenVNC'
	$buttonOpenVNC.Size = '75, 23'
	$buttonOpenVNC.TabIndex = 7
	$buttonOpenVNC.Text = 'Open VNC'
	$buttonOpenVNC.UseVisualStyleBackColor = $True
	$buttonOpenVNC.add_Click($buttonOpenVNC_Click)
	#
	# label2
	#
	$label2.Location = '7, 30'
	$label2.Name = 'label2'
	$label2.Size = '100, 23'
	$label2.TabIndex = 5
	$label2.Text = 'VNC Status:'
	#
	# buttonDeployVNC
	#
	$buttonDeployVNC.Location = '7, 59'
	$buttonDeployVNC.Name = 'buttonDeployVNC'
	$buttonDeployVNC.Size = '75, 23'
	$buttonDeployVNC.TabIndex = 4
	$buttonDeployVNC.Text = 'Deploy VNC'
	$buttonDeployVNC.UseVisualStyleBackColor = $True
	$buttonDeployVNC.add_Click($buttonDeployVNC_Click)
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '994, 24'
	$menustrip1.TabIndex = 11
	$menustrip1.Text = 'menustrip1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '152, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# contextmenustripServices
	#
	[void]$contextmenustripServices.Items.Add($enableToolStripMenuItem)
	[void]$contextmenustripServices.Items.Add($startToolStripMenuItem)
	$contextmenustripServices.Name = 'contextmenustripServices'
	$contextmenustripServices.Size = '153, 70'
	#
	# enableToolStripMenuItem
	#
	$enableToolStripMenuItem.Name = 'enableToolStripMenuItem'
	$enableToolStripMenuItem.Size = '152, 22'
	$enableToolStripMenuItem.Text = 'Enable'
	#
	# startToolStripMenuItem
	#
	$startToolStripMenuItem.Name = 'startToolStripMenuItem'
	$startToolStripMenuItem.Size = '152, 22'
	$startToolStripMenuItem.Text = 'Start'
	$contextmenustripServices.ResumeLayout()
	$menustrip1.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
