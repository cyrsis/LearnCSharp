
Play by Play: Angular 2/RxJS/HTTP and RESTful Services with John Papa and Dan Wahlin
by John Papa and Dan Wahlin

Learn the essentials of communicating with RESTful services in Angular 2. The materials for this course are available at: https://github.com/DanWahlin/Angular2-RESTfulService.

Start CourseBookmarkLive mentoring
Table of contents
Description
Transcript
Exercise files
Discussion
Recommended
Course Overview

Course Overview

Welcome to this Play By Play course on Angular 2. My name's Dan Wahlin, and in this course I'll sit down with John Papa to talk about Angular 2, and how it can be used to work with data provided by RESTFul services. We'll discuss key technologies in Angular 2, such as RxJS, observables, the HTTP service, and more, and see how they can be used to asynchronously communicate with servers to get data. Now if you're new to play by play courses, they're unscripted and on the fly, and John and I enjoy this type of approach a lot, and tend to have a lot of fun with it, so we hope you'll have fun learning ab out these topics with us. Some of the major topics we're going to cover in this course include, walking through an Angular 2 sample app, exploring the RESTful API with a tool called Postman, creating injectable services in Angular 2, working with RxJS and observables, and subscribing and unsubscribing to and from observables. After watching this play by play you'll understand how Angular 2 can be used to communicate with RESTful services, and the objects and technologies that are used to make it all happen, and make it all tie together. So come join us for a fun and educational look at Angular 2, RxJS, and more, and learn how these technologies can be used to work with data exposed by RESTful services. This course was created with and earlier version of Angular 2, but the sample code that'll be provided in the link throughout the course will have the latest, up-to-date version for you. Feel free to learn with us about the different topics, but if you'd like the latest and greatest code we'll provide a GitHub link where you'll be able to get that.

Fundamentals of Angular 2 HTTP RESTful

Introduction

This course was created with an earlier version of Angular 2, but the sample code that'll be provided in the link throughout the course will have the latest up-to-date version for you. Feel free to learn with us about the different topics, but if you'd like the latest and greatest code we'll provide a GitHub link where you'll be able to get that. Thanks for coming everybody. My name is John Papa, and I'm here with my good friend, Dan Wahlin. Good to be here John. Sure. Yeah, so my name's Dan Wahlin. I run a consulting company called Wahlin Consulting, and we pretty much specialize in all things web, do a lot of training as well, so we're super excited about Angular 2. Always excited to talk with John here because John's just a cool guy, so. We're going to have a good time today because Dan and I have been playing a lot with Angular 2, a lot with Node, and other kind of web APIs, so today we thought we'd figure out how do we actually use all of these new data features in Angular 2 to talk to existing back ends? Things like, what's Rx, and how do you use HTTP, and actually get all that data and put it into an app? Exactly. Yeah, one of the big things when you start with Angular 2 is there are a few new kind of pieces, little puzzle pieces you've got to worry about, and I know for me, and John as well, because we talk a lot from time to time, it's one of those things that once you get the hang of it it's actually pretty straightforward wouldn't you say? It is. But it does take a little work to get the hang of, and that's really what the goal of this play by play is, is that we can walk you through some of the fundamentals, you know, what is this Rx XYZ thing, you know? Exactly, and Rx is reactive extensions, right, for JavaScript, in this case, but they also have for .NET and for other platforms like Swift even. Exactly, exactly. So we'll get into some of that. You know, if you have a RESTful service, which I think most people if you're building a SPA you typically do, and so we'll talk about how do we call that RESTful service? How do we interact with it? We'll get into some of the really cool Rx stuff like observables, talk about some of that. I'm looking forward to learning more about that. Oh, yeah, yeah, he already knows. Don't let him kid you. But anyway. But we'll have a couple surprises along the way too I'm sure, and we'll also walk through how you debug these kind of things, and how you spin them up and run them, and like show the tooling experiences. I can see like you're using Visual Studio code, is that your preference? Yeah, I love Visual Studio code. VS code, I can't even hardly say it, I just, you know, VS code or code for short, you know. So yeah, VS code is pretty awesome. As we go through we'll see that if we kind of screw something up, we miss an import, we did a variable that should have been typed or something, because we're going to be using TypeScript as well through this, we can get a really quick feel for, yup, you screwed that up, and that's great because I'd rather know upfront, then later in staging or something like that, user acceptance testing. You mean you don't like to find out when things are live in production and they break? You know, it happens, but no, not really, not really. So the tooling will tell you a little as you go about, hey, you made a mistake here. It may not fix it for you right now, but it will at least tell you you made a mistake. Exactly. Awesome. You get the red squigglies and all that fun stuff. So what's our baseline Dan? What have we got so far to start with? We have a phenomenal app John. I'm glad you asked. It's pretty amazing. If we go in and I'll refresh because there's some really phenomenal animation here, yeah. Wow, it's a blink. Yeah, so it's a little, you know, Hello World, and we're going to hopefully get some data into this, some customer data, and we'll walk through some of the kind of building blocks of this as well, because, you know, before you can get the data in you really do need to know about, well, you have the data, that's great, but what's going on behind the scenes with some of these components and such, but the goal of this is we'll get through it, and we'll hit this RESTful API, and it is hidden in a database. This first one we're looking at NodeJS with MongoDB. Let's just talk about our stack a little bit. Yeah. You've got Angular in a browser using Chrome, using VS code for your tooling, and you just said we're using NodeJS with what, Express, Restify? Express in this one, but you know, Restify is awesome, and we could use any of those. There's no shortage of RESTful modules. Exactly, and then that's in what kind of database did you say? This is in MongoDB. Mongo. So this is hitting one of those no SQL databases. Of course, we could hit SQL, we could hit Oracle, it doesn't really matter, but in this particularâ€¦ The point here is we're going to try to hit a database, but you could have any backend. Exactly. It could be ASP.NET even. It could be ASP.NET. In fact, we'll see how things go timewise. Awesome. I'd love to see multiple backends.

Walking Through the Fundamentals

So yeah, just to kind of walk through the fundamentals of it, we have server.js here, and this is a real basic one. In fact, I've even commented out a few things to kind of talk about real quick. One is this csrf, which his your cross site request forgery token generators. It's a little security feature if you ever do like posts or puts or deletes, you know, to make sure that John over here isn't actually trying from another site to post over to my site. So it's a cross site request forgery check. It's not forging for you. No, no. It's yeah, yeah. It's actually trying to hopefully protect you from these attacks, so I've commented that out on purpose because I wanted to leave it in, so that we know that, yeah, that is a possibility, but it's one of those things also that you have to deal with, typically with headers sometimes, and we're not going to worry about that, at least initially. Well especially if your API is one place, on one server, and then your static server that's loading your sites in another, then you're definitely going across, you yourself are going across site, so you have to make sure you're actually allowed to do so. And we'd have to enable CORS and all that fun stuff. Right. What's CORS again? Cross-Origin Resource Sharing, something like that. Okay, well that sounds good. It's not the beer? Yeah, CORS, Coors, whatever works, but. So anyway, in a real app, whether it's ASP.NET or NodeJS or whatever it may be, we would, of course, want to have that with a backend RESTful service because you know, you don't want some unknown stranger just randomly trying to post to your site, so that would be bad. But all I really want to show here is that this is the main API. It's pretty straightforward, and we're just mainly going to worry about this one. We can get Customers or, you know, maybe we'll even do this one. I don't know, we'll see how time goes, but we'll get the Customer with an id maybe, but what these will do is allow us to call this api/dataservice, and you might recognize that, maybe from like web API type stuff, so I kind of modeled it after the same, and then so we can do local host, in this case, since I'm all local here, api/dataservice/customers. Case won't matter. I did upper here, but it doesn't matter. So if we go back just to kind of make sure the service is going we can come back in, and we can do our localhost here, and I think I'm on 3000. So we're serving the site from the same place we have the web API right now? Right now. Yup. Okay, just for simplicity. Yeah, just to keep it basic, and there we go. So not super phenomenal data, that's not formatted so nicely in Chrome here, but this would be our raw JSON here. Why do you even need a UI? You could just give that to the users. I call that the JSON UI. I've said that once actually. Awesome. They didn't buy into it. I can't imagine why Dan. I don't know why. I mean, I think my mom would love this, but anyway. So anyway. So that's kind of the goal is, you know, how can we get this data, which officially is hitting again, Mongo, you know, coming back, we're serializing it down to JSON, then JSON's coming down to the browser, and now we can do our thing, and hopefully get some data. Okay, and so we're going to have to start with an Angular app, and build up some Angular things, so we can actually talk to that backend. Exactly, exactly. Things is a technical term by the way. It is. It is. Things is very highly technical. In fact, some of the stuff we'll cover we're going to inject things.

The Angular 2 App Structure

Okay, so now that we have a foundation Dan, thanks for giving us that, we know where we are. The next step is to figure out how do we start building the app that actually talks to the backend, so walk us through that. Sure. So first things first. I'm going to actually go into this package JSON, alright. Now if you go to angular.io they have a QuickStart or you can check out, you know, John's been involved heavily with Tour Heroes, as an example, and as you're working with that you can download these initial kind of GitHub repositories, and it'll save you a lot of time. I don't ever start from scratch on this. It would be, I could I suppose, but it'd be a lot more time than I'd care to waste. For Angular apps you mean. For Angular apps. Yeah. It's like, go to find a nice seeder, you know, John has some stuff, I have a jumpstart or I have a bare bones one up on my GitHub repository. You can use any of those, you know. And eventually they'll have an Angular CLI. It's pretty awful right now, so we're not using that. Pre-alpha. Yes, which means use at your own risk, but eventually that'll be a nice starter. That's like the letter before A, which doesn't exist, so you've got to be real careful with that one. Is that like omega, alpha and omega? Yeah, I guess it is. I don't know, but something scary. So some of this is just some express type stuff, so we can kind of ignore that, but that's our backend web API. Right. Our features right there that I want to highlight, and these features here are going to be the specific features for Angular 2, so you'll notice that there's an Angular 2, and now this is going to change, right? As of today, this is the beta. This changes, I don't know, weekly, sometimes maybe bimonthly, and then you'll notice these other guys though. We have systemjs we're going to have to talk about here a little bit. We have some shim stuff and reflect-metadata. Now a lot of this stuff you don't even need to worry about it. We're just going to use some scripts that it provides for us, but one of the biggies I wanted to point out, in addition to Angular 2 here, is that we would have the ability to use this RxJS, reactive extensions, and what this is going to do is I've already run, you know, so I went to the command line, and in VS code we can right-click, and we can say Open in Terminal, and so from the terminal I could run, and I'm not going to redo it because it'll take a while, but I can run this npm install. That will, of course, run against my package JSON. And it's the npm repository on the web? Yup. That's right. It pulls down all that stuff. Yeah. Very similar. You know, we have NuGet for the ASP.NET folks, we pull from that or you have Gem for Ruby, and a very similar thing. We're getting down packages or modules. It's package manager. Yeah, package manager. So if you haven't done that before that's exactly what we're talking about. It's really easy. Just npm install. You would just have to have NodeJS installed, of course. So once I run that particular command we can come over and you'll notice that I have this big old folder with a lot of stuff in it, but it's just all this stuff. Alright, and all this stuff in it, and some of the stuff in there is now my Angular scripts. Now you don't have to use it this way, in fact, let me show you what I mean by that. If we go to the index here you'll notice that I'm actually referencing this node_modules path for all my scripts. Now these are kind of some polyfill type scripts to make it work properly in some different browsers, but really where it gets interesting is right here. This system, source js right here, you have Rx.js you'll notice, and then, of course, we have our Angular, and we'll talk about HTTP and things as we do this. So I could have pulled these from the CDN, so you know, you have your CDN out there, different CDNs, but Angular actually has one you could pull these from. I'm just kind of pulling them locally because that way I can work locally, I can be on an airplane, and still use all this stuff. I don't have to worry about connectivity there. Right. So now obviously, in dev time we can use this, but even if we went to production we wouldn't want to put node modules in production because you wouldn't deploy all those, but you might put them in like a dist folder or a public folder of some kind or hit the CDN, as you said. Or hit the CDN. Yup. Or both for the fallback. Yeah. It depends because you might have the fallback, exactly, and CDN, they say they never go down, but every now and then. So for now we're not getting anything that has to do with getting data. There's no No. It's just getting Angular at this point. At this point, this is just your core scripts that we need to get started, and probably the number one we'll highlight, and then we'll jump into the good stuff here with data is this little bit down here. This is going to kind of kick off the process. It's going to load this script, which is up in here, and it's called main.ts, but this'll get compiled from TypeScript down to JavaScript, and what we're doing is saying, hey, I don't want to have to put main.js, I just want --- main actually. I don't want anything on it. So we don't have to keep typing .js everywhere. Exactly, and so we'll see that as we start doing other imports of ES6 modules or ES 2015, whatever you want to call it. We'll see how we can use that, yeah. Cool. So this'll kick off the main file, and then our app gets loaded up, and then we can go have fun. Yeah. Yeah, so from here just a couple things to point out. We have our root component, so this is kind of our normal Angular sort of loader. You'll notice I have a router-outlet. This is going to be where all my components load. I have a whole one component right now. One little bit of HTML. Very sophisticated. And that's where it says router-outlet, so I'm assuming that's where the views are going to show up on the page? Exactly. Exactly, and right now I just have a little bit of routing, and that routing is actually going to load this CustomersComponent into this area right here. Sweet. So really what's going to happen is this app-container, if we go back to index that's right up top here, that's that guy, that inside of it has that router outlook. That's going to load where we can put our data. Gotcha. So that's kind of just a quick overview. Alright, so if we want to do this you'll notice again, that back in here I have this CustomersComponent that I imported from this customers feature folder, and so this customers component right now is highly sophisticated. Would you like to see how sophisticated it is? I'd love to see it, and I'm sensing a little bit of sarcasm on this. No, no, no, not at all. Number one, it does nothing, and number two it says Hello World. Awesome. So that's where the Hello World that when we ran in the app earlier that's actually the component that's loading for that. Is this the guy we're going to change at the customer column? That's right, so this is hopefully where we'll start to get some services going, and we'll talk about RxJS a little bit, and call to server, and get the data, and then put it all here, and use some directives along the way. Okay.

Exploring the API with Postman

So, alright, so first things first. We could start with the code, but I always like to kind of start from the backend forward on this because if you don't know what your data is it's kind of hard to write the HTML, right? Sure. So I'm going to leaveâ€¦ So we know the shape of our data right? Like what our customers look like. Exactly, and you know, this way that I showed, this 3000 here, let me go back to dataservice/customers. Ehh, you know, that's not phenomenal there, and so you know, we could use, one of my favorite tools is called Postman. You could use Postman. I'm not even sure if I have that on this laptop. Yeah, there's a Chrome plugin for Postman. Let me see if I have it. Oh I do. Good. There you go. So this is one of my favorite little plugins. If you're on the Windows side this is great too. Some people like Fiddler, you know, over there, but since I'm on a Mac in this particular part of it we can come in and this is just a free Chrome plugin, and I always use this, we recently did a project for a company where we're hitting their kind of cloud API, and they didn't have any documentation at all about what we were supposed to get back, so I'm going to change this to a GET real quick, and so what I would do is just hit the URL with Postman, and you can just change it to the verb or the method that you want to call, so in this case, GET. Do a Send, and wah lah. We now have the data here, and it's pretty good to go. Now I have a little better idea. Maybe it's a little better than what we had in Chrome, you know. Sure. So first off, number one is we'll make sure that, yeah, the service is available because if we start jumping into the Angular code, and then later find out we're debugging Angular only to find out, you know, our service wasn't up, then I like to do this first, kind of get it running, and it's really cool because if we do, we're not going to change it in this video, the service, but if we did change it, it has these kind of replays. In fact, I had a post earlier. I'll delete that, but if I had multiples of these, you know, we can kind of click on it, replay it, and get back our data, and see what changed. Gotcha. So will that cache the data and show you what data came in it last time or will it just cache the settings? Just the settings, just the settings. Yeah, so this'll kind of load it, and this one doesn't do much, but you know, we could add custom headers in here, and you know, just as an example, if you haven't seen this we could say Accept. You know, I don't want to do this for this demo, but text/xml, and now the API, if it did it, which this API doesn't, but if it did, then it would automatically serve up email/xml. Right, because some backends will optionally show send back JSON or XML or something else, so if there is that option you can send it back in headers. Yeah, so it's a great tool. If you haven't used it before, this is like my go to tool nowadays. You know, it's free. They do have some bonus features I think you can buy, but for the stuff I need, even authentication and things, we can get into, so yeah. It's nice. I like free. Do you like free? I like free. Free, free good. Free good. Alright, so that kind of gives us our data, right? We've got first names and last names, states, and it looks like they've got nested data, like orders? Yeah, so in this case, it looks like the database is returning some orders or the API is, I should say, and there's different APIs. I'd have to look up, let's see, where's the id on this guy? Eleven, yeah line eight. Eleven, yeah. So I think I also have an API where we can do customer/ like 11. Let me see, yeah, and that just brings back the one customer. Perfect. And now we can go back to the previous one, you know, resend it. Oop, actually that one I guess. Resend it, and there we go. Kind of off and running. So we can get one customer by id or we can get a list of all the customers. Yeah, yeah, and then you can get, there's a lot more. There's a summary you can get, so this is getting like all the raw data, but I also have a customer summary. In fact, let me show you that API. Which is less data about the customer? Yeah, it's kind of like for, you know, on a home page, for instance, if you wanted to show you customers, but you only need a subset of the data, but I have an API. I think it's customerSummary. Let's try it. Yeah, there we go. That's pretty common because even though you can get all the data from customers itself, the list, this is a nice, flatter version of that I assume, with less data, and more customized. Yeah, and you can see it's much flatter. Which is really important when you're building web or mobile apps right? You want the smallest amount of data to transfer over wire, so you don't have to keep sending all this big stuff back and forth. Yeah, exactly. Especially in like mobile because, you know, you never know when they're going to be on 3G or worse connection, and off Wi-Fi, so we might even use this. I don't know. This is a nice little starter one at least, you know. So what's the first thing we're going to do in customers component? Are we going to use customerSummary or are we going to use customerList? Where would you like to take us? Well, you know, I don't know that it really matters. If we want to show orders as well, then we'll probably want to use customers, right, because that gives you order data. If we just want a summary we'll do the summary. Why don't we do this because it's pretty easy. You'll see the data. The properties really aren't that much different, you just get less data here, so I think it might be good to start with this, just get the basics working, and then if we want to go more we can. So it's not a different shape, it's just a superset. Yeah. Okay. Same properties that are not even renamed. Let's start with the smallest. Let's do that. Let's start with the smaller one, customerSummary. So yeah, I'll probably lose this in my clipboard, but for now we'll just kind of grab that. Okay. So alright, so that's kind of what the backend data looks like, and it does support the POST and the PUT and the DELETE and all that as well.

Creating Services in Angular 2

For now let's just come on back, and turn off the VS code here, and we'll come back to this guy. What I'd probably want to do next, let me close that before I save something I didn't want to do, is we don't really have a way to get the data. You know, I could come into here, and you know, you can say, hey John, let's just do it right here in the component, but the I guess, the proper way, the most official way we should be doing this in Angular 2 is to use services. Now just as a quick background, because I know a lot of people are kind of migrating or will be from Angular 1, we're kind of used to, you know, I know for a while I always preferred factories, and then as I saw more of the ES6 features I kind of preferred the services. For Angular 1. For Angular 1. Yeah. And then, you know, then you have providers and values and, what is it, constants, and, you know, all this stuff. Well, the good new with Angular 2 is you just have to memorize one thing. It's really hard, and you have to memories classes, that's it. There is no such thing as, I'm doing this, this, this or this. I've got to worry, well this you have to return the function, and this you don't, and it's just very straightforward, so let's create one rule, just simple one, right, to get started here. Okay, so we're going to create a service in Angular 2, which is just a class, and we're going to use that to go get our data. Exactly. Exactly, so the photo structure, very subjective here. I'm going to, since this could be shared by maybe multiple components, I'm going to go ahead and put in a shared folder, and make a services. I could put services at the root too. It really just depends on what you want to do. I don't have anything in there right now, you'll notice, so let's go ahead, and we'll add a new file, and let's just call this, since it's a data service, I'm going to say data.service.js, real simple. Are we using JS or are we using TypeScript in this space? Oh geez. I wanted to see if you were paying attention actually John. Okay good. I thought you were mixing on me. You almost, you delayed there a little. No. Yeah, I meant to do ts, thank you very much. No worries. Because we're using TypeScript, but that's going to transpile down to JavaScript for us, so we don't even need a JS file anyway. Yeah, and actually, it put it in the wrong folder anyway, apparently. Where'd he go? Probably in the root. I'm not even seeing him in the root. Do you see him? Oh, no, no, no. It did put it. It did put it. Let me show you what's going on. Actually, this is kind of an interesting thing with VS code. Ah, you're hiding your junky scripts. So I actually have a setting to exclude all JS files, so this could have really thrown you for a loop, right? Yes it could. Like I swear I created that file. Okay, yeah. I'm purposely hiding because we're doing TypeScript, and we want to actually compile that down to JavaScript, and I don't really want to see that, so actually, let me go in real quick. I'm going to Reveal in Finder. Before you do that Dan, could you go back and look at that setting for a minute, because I think it's interesting. Yeah. So you're in VS code, and made a JavaScript file, and you're hiding it. You're also hiding the map file. Something I learned recently, which you might find interesting too, and others, is that you can actually do that conditionally. Yeah, yeah. I never remember how. That's one of those cut and paste things. Yes, which is why I put them in gists, G-I-S-T is up on it. So you can say something like if there's a TypeScript file that matches the same exact file name don't show me the JavaScript, but otherwise, show me. Because you might have a JavaScript file for real in your app anyway right? Yup, yup. Okay. Do some pattern type stuff, and yeah, it's pretty cool. So yeah, anyway, let me get rid of that because that was a, we'll call that a typo I guess. So we'll reveal, and you'll see that it is there. Yup, and we could rename it there too if you want, either way. Yeah, actually, we'll just do that. Where'd my Rename go? Let's just Hit the Enter key. There you go. Alright. That's called OS dyslexic by the way. And look, now we've got a js and a js.map in here. Yes. It already did it. So wait a minute Dan. Yeah what? How is your Mac figuring out that it needs to automatically compile to TypeScript to JavaScript? Well John, I have a very special Mac. I take very good care, do you not take care of your Mac? It's a special Mac? Oh it's very special, yes. Really. It loves me, so it just does, Are you really caressing your Mac right now? Ah, well we won't go there, but yeah, we want to keep this as a, you know, kid friendly show, but so jumping on down here you go back to services, and there it is, and the way this was compiling is, yeah there's some magic here. So you'll notice this console. Yup. I have, and let me just share this real quick. We looked at the package JSON, but at the top you'll notice that I have these scripts. Like shortcuts? Yeah, shortcuts. So, for instance, to start my little web API, if you will, my NodeJS server, you know, I can just say npm start. To do compilation with a watch, and that's, of course, the magic right there. I can do this tsc:w, so if we go back to the console here you'll notice I ran the tsc:w. Right, so you've already been running this, and it's looking to see if any files come in that are of TypeScript, and if they are it's going to generate JavaScript and maps? Exactly, and that's all, even though we won't make this into a TypeScript type of thing, that's all kind of configured in here in this tsc thing. And the key there too, is that's a source map right? So if we go debug this in Chrome or Firefox or whatever that'll actually map. We can debug lines of the TypeScript in the browser, and map to the JavaScript. Yeah, so those that have done source maps with just JavaScript you can do that with TypeScript as well, so let me go back to the Finder, and as you saw, these files are probably empty right now because I haven't really typed anything, but yeah, you'll see this map file. So yeah, it's pretty phenomenal right? I don't really want to debug the generated code, I want to debug my code because that's what I've got to fix, so yeah, this'll do all that for you, and really the magic is right there for the source maps. And that'll survive minification too. That's right. Which is great, so even if you deploy to production you can actually work on debugging your production code using the actual TypeScripts you wrote. It's very cool. So have you ever been like, feel like a machete in the jungle right, where you have like jQuery, Source or something, but it's that one line from here to Australia, you know? Yeah, it's like a one liner, and it's 8000 characters long or more. Yeah, it's like you can't debug that though, and if you're minifying your scripts, which you should be, then you don't want to worry about that for debugging purposes, so the maps will help us. So yeah, a little bit of magic there, but that's all. We won't really, from this time forward, even have to worry about the compilation, except for if I screw up. Cool. So I distracted you a little bit with that, but you were about to create a data service TypeScript file. Yup. Let's go back, and let's do that. So a service is really just a class, and I'm just going to call it DataService. Real simple. You're so creative. I know, I know. I come up with great names. Now, you know, you might want to call this Customers, oh ustomers. Ustomers. Yeah, or ustomers. CustomerService, whatever, but I'm just going to keep it really basic, and let's just say hey, we get data from here. Now a service is that. We have now created a service. Now it's not very useful, but it's a service. We would probably want to get things, you know. Yeah, we want our service to do something. You think? I think doing something's a good idea. Angular 2 is so cool. Didn't you hear? There's a new feature. You just use telekinesis. It just reads your mind, yes. Get my customers. You rub your temples like extra hard, and yeah, it gets rid of your headache. Yeah, so I don't know, get customers probably works, right? Or let's do this. Let's do a getCustomers summary. Yeah, because we've got two APIs. Because we have two APIs, so let's get customers. Let's get wild Dan, let's get wild. We'll be wild. GetCustomersSummary and GetCustomers later. Maybe, we'll see. I don't know. It depends on how nice you are during the rest of the clip. Okay. Yeah, so we'll come back to this. Let's just say for now that it returns something, right? Let's build out the shell, put all the pieces together, and then we'll start to fill in the pieces here. Now I probably need a way to get data from that API, right? Yes. And, you know, the get my data or data, whatever, comment's probably not going to work, so we need to be able to go get that data somehow. Now in Angular 1 we would use $http typically. In Angular 2 technically you can use kind of whatever you want I guess, but they do have a built-in HTTP object. So we can use their HTTP, but when you say you could do you mean we could use like the fetch API or jQuery Yeah, yeah. or whatever we want? Now, yeah, I'm not going to say it's going to be seamless, because it won't, right as of today anyway. Now that may change because we're still kind of in this it's not officially released yet mode, but yeah, I mean this is just a class. It's not a special Angular. There's nothing Angular about this at this point. Now the HTTP object that we're going to use here, yeah it is from the Angular team, and you know, it's going to be a little more tightly integrated, so it's going to work, you know, it fits like a glove type thing, but I kind of want to emphasize that if you compare all this to what we did earlier in Angular 1, for instance, that's it. I mean I now have a getCustomersSummary, and now we could pass this into our component. Pretty cool. There's a lot less Angular here than there was in Angular 1. Yeah, for sure. So it works pretty cool for data access.

Using the Injectable Decorator

What we're going to do here is I'm going to come on up, and we're going to have to talk about a little thing called a decorator. We ultimately want the HTTP to go into this, right, and in Angular in order to make that happen, and this is where the red kicks in right away, we can say, and you'll notice I'm not getting any help as I type, but Injectable, which first time I saw that I went, oh cool, DataService is Injectable somewhere else, and actually that's not what it means, so what it means is if I have a constructor here that takes xyz in there, we'll come back to that, I can inject things into the constructor. Right. That's kind of what this guy means. Now we're going to have to fix that guy because he's red still. So he's red because he's having a problem in life or? He is. He's kind of, you know, I won't say he's blue I guess because he's red, but he's not feeling well today. So he doesn't know where he is. He's lost. So that's the tooling telling you, I don't know what Injectable is, and the @Injectable that's a function, that's a decorator function. That's right. That's why it's got the parentheses, and it says that this class is injectable, which I think you just told us means it's not the class is injectable, but has something that needs to be injected into it, Exactly. Which we don't have yet. We're going to get there. But you're going to get us there. We're going to do the HTTP guide and we'll inject it, have it call the server and all that stuff. Okay, so we need to, this is where it gets really cool, and I really like this. If you, you know, already have a background in C# or Python or whatever it may be you're kind of used to importing things, you know, so Injectable, it's not going to read our mind and go, ahh, oh it's there. Go get it. Right. So you mean like in C# are we doing using statements? Exactly. Okay. Exactly or imports in Java. So we have to use Injectable from somewhere or import. Import. So I'm going to go ahead and just type it out by hand. There is, just as a little heads up, you'll notice this little import statement here that we could use as a code snippet, but let's type it up by hand. So I'm going to do Injectable, that was nice of it for me, and then we're going to say, where does it come from? Now, real quick, let's just run off because it is very useful, and I love to show this because I really like this feature, let's run off to angular.io here, and in the Docs if we go to the bottom we have this API preview. Oh, look at that right here. Oh, or we can click there. It's right in the middle. And I always forget that, you know, and I know it's there, and I forget it's there. So yeah, thanks for the reminder. It's staring us in the face, literally. And I always scroll. It's funny, but anyway, there it is. So, Thank you for the subtle, don't make Dan look dumb, but hey Dan, it's right there. I didn't know it either. I actually did know that, but I always forget. I'm used to the left, but. Now you want to make me look dumb. Yeah, I did though John. Anyway, so we could type like Decorator here and see what comes up right? And you'll notice some things come up, but that didn't help us because it's called Injectable. It's a decorator, but it's an injectable decorator, so we say Injectable, and you'll see it's right there, but I can even filter these down, so I could say Decorator or find me a directive callback. There isn't one. Well that's cool because you know you have to click on anything more, and you still can see that where it's coming from is angular2/core. Exactly, and that's really what I wanted to show right here, and then, you know, if you want to get more details you can click it, and this even shows the code here. Right. So you can see it's a factory for creating Injectable Metadata. Alright, so having shown that, that's usually where I go if I haven't used one of these guys, and I'm like, man, what module is this in? It's kind of like walking into a big like Smithsonian type of place with tons of books or something, I don't know, whatever the library is called. Library. National, what is it called? Yeah. The big one, and going, wow, where do I find, like where's the Harry Potter series, you know, and you go look over here and stuff. Sure. It's going to be the same thing here. So we're going to come on in, and we want to inject this from angular2/core, alright, and that's going to give us the kind of module where this guy lives. Now this is basically only saying, you know, core has quite a bit in it, and if we went back to the help docs there's a pretty good list there of things. It's everything that is core to Angular, like you can't operate without it. Exactly, exactly. So we only want this one thing to be officially loaded up kind of into memory, and now you'll notice this guy's a lot happier, and we can go off on our merry way here. Sweet. Alright, so now we'll come back to the HTTP part. We now have a service, that's great, but we need to be able to ultimately get this guy into our customers component, so we have a couple options here. One is we could come into here, and we could do a little bit of work, and we can inject it into, using something called dependency injection, which I know 1 had, but Angular 2, as you know, is more robust, I guess you could say. Right, the DI here is a little bit more powerful. Yup, and we can do that, but that would mean that it's pretty much only available to CustomersComponent or any child of CustomersComponent. We could also new it up, straight up right? We could, in fact, yeah, and let's just show that real fast. I mean, we could always come in and say, you know, _dataService is a, and then we'd have to import it at the top. I won't do that, but we'll say it's of type DataService, and then yeah, I mean we could do something like this._dataService = new DataService. It's just a class. Right. But, you know, now we're like really tightly coupled at the DataService. But you couldn't knock that exactly right if you wanted to do testing, and you're not really using DI now either because you're making your own instance, which means that your dataService isn't going to have a lot state. It's going to have a lot of functions and methods. Right, right. So those methods are really intended to be shared, in like a singleton format, every customer, every component that does this would get its own, and that's not great. It's not because, like you said, if you're unit testing, well I just hard-coded my what will be ajax calls. Sure. And that's not really a unit test, so let's get rid of that. That's kind of the don't try that at home kids. So we're going to use dependency injection to deal with this, and this isn't a new thing in the world of programming. I mean, Java and .NET and other things have this already, like things with Unity or Ninject or other IoC containers. Exactly, exactly. Castle Winds or Autofac, all those fun things. Wow, you're going to the way back machine for me. I know, I know, yeah.

Sharing Services with App Providers

So what we could do is, yeah, we could make this injectable here, but we're going to do it at a higher level. Now, I'm assuming that, you know, later on John comes along and says, hey I'm going to write a component that does a reverse or something, and he might also need the dataService, so we're not going to build a lot of components in this, but we'll pretend we were going to. Right, because the whole idea behind services is to share. Exactly. And you're not just going to have one component in your app. Yup. Many people may want to see customer information. That's right. Alright. So instead of putting it there let's go look at this app component, and you'll notice there's this little guy called providers. What's providers? I'll bet you he provides something. I bet you you're right actually. Good thinking there. You'd almost wonder if you've done this before, you know? Maybe. Yeah, a provider is when the dependency injector fires up, and ultimately when our component gets the dataService it's going to go and say, hey injector, I need a data service, and the injector is going to go, okay, who can bring, it's kind of like yelling out, who can provide me a datasource. Somebody's got to new it up for the first time right? And so right now we don't have a way to do that. Now we do have a way to provide something it looks like. You know, we have this APP_PROVIDERS here, so we can kind of peek at that, and right now it looks like we have some routing stuff. Okay, not that helpful here, and then there's some other stuff related to that, but nothing with the dataService. So what I like to do is I could absolutely come into here, we could import data Service at the top, put a comma, it's just an array. You know, put a comma in and we could do it right here. That ends up getting pretty big though I've found, and so I kind of make this, as of today, and this may change, but this is what I like as of today, this app.providers.ts. So what I'm going to do is I like to kind of bump down my custom imports from the built-in stuff, so I'm going to put one line down. Added to the top is anything that I didn't write I import, and then right there on line 4 there is stuff that I wrote. Exactly. It's just space separator because you will end up with a lot of these. Yeah, and you know, this one's super simple so far, but you go take a more complex app like your event one or I have a customer manager one that actually does this for real up on GitHub. You come up with a dozen or so things that you import, and at the app level, if I'm hearing you right, the app providers is anything you're going to use throughout your entire app. Um hum. So you're putting this up here because you're anticipating that we may want to, at a future date, use this data service across other components? Exactly. Okay. Now, you know, if I wasn't going to, then I'd say put it at the component level. And providing it doesn't, providing the data service here, doesn't mean it gets instantiated here, it means it tells Angular about it at this top level. In fact, remind me, and maybe once we get this hooked up we can comment this out and see what happens. Yeah, let's do that. I like errors. Errors are good. Errors are good. Let's get it working here first, and then we'll come back and comment some things out. So now where do I go? Well, you'll see APP_PROVIDERS is kind of in the route, so I need to go down to from current folder to shared to services. Okay. So we'll say backslash So it's relative. Yeah, relative to where you're at, so shared/services, and it's what, data.service. Without the ts again. Yeah, without the ts or the js. And if it's still right we either mistyped it or we didn't export it. Exactly. Okay. So right now this worked, and it knows where to go, but you'll notice that this guy is going, I have no exported number. And the message is good. It's telling you, you didn't export that thing. Well, that's also triggering to us we didn't export anything. Yeah, we didn't export anything. So right now this class is, it's like half way there, well, we'll say a quarter of the way because we're not doing much, but we need to, in ES6 terms, we need to export. So this file is a module. Yup. That we've imported into the app.providers.ts, Right. But that module didn't happen to share anything with anybody else. Right, it was very stingy this day. Right. We're going to open it up, and get it interacting with the other kids more nicely. So I assume that also means if we can export the service, then we could have other things inside this file that aren't exported, like helpers if we wanted to? Yeah. And then they would be able to call it, but nobody else would. So I kind of think of it, it's not truly a public, but you're kind of saying that it's publicly accessible. Kind of like public private, kind of. It is, kind of, kind of sort of. Kind of, sort of, not really. Kind of, sort of, not really, right. Was that clear everybody? Yeah, everybody get that? Yeah, so you'll notice now it's not red. Alright, I'm going to go ahead and leave this where it's at, and now we'll come in and say, in this array, and that's all it is right now, it's just a constant, which means I'm not going to be changing the auto array, at runtime anyway, and now I can say, DataService, and we're kind of off and ready to roll, so. Okay, and that APP_PROVIDERS constant is being used back in app.component.ts? Correct. Let's go back, and you'll see it's right there, so really it's like copying and pasting that into here, which keeps your app.component.ts a little shorter. Yeah. That's why you're pulling in the garage. That's it, that's it. I like that. It just allows me to focus on the providers in one place because again, like you already said earlier, you're not going to have just one little provider in a real app. No you won't. You'll probably have a bunch, and as a result, like you don't just have data service. You have customer service, you have order service, you have invoicing service. You have, you know, single responsibility type things. Then you'd put those here. So by putting it here it kind of automatically now provides one new instance, one, it's going to be a singleton, that'll be passed down to all the children of AppComponent here. Notice that also has the export, and the reason that works this way is because by any providers, again, that you put in the top component, they automatically filter down to the child components. So by the same token then, if we created a service called customer service that is only used by the customer component. Yup. We could, instead of providing it the app we could just provide it at that CustomersComponent level. Exactly. Okay. We could have come, and let's just show that real quick because that's a great, you might want to do that actually, where it's like, I don't need this everywhere. You know, I don't want to load it up globally. Yeah, because if we didn't do this, like what you're typing here, if I wanted to reuse and share this customer component folder and everything in it, if I copied that and gave it to somebody else it really doesn't have everything it needs right? That's right. Because that data service, if it was called customer service, it wouldn't have been in there. So by making the customer service be part of it we can make it more portable, but if we did the data service, which we're doing, we're actually making an architectural decision that we want all of our services, our gets and posts and things to be in one place. Yup. And that's shared at the top level. Yeah, because there's apparently, apparently, even though we have one component, there's apparently other components that we have architected in our very serious meetings we've been having lately. Yeah, now I would have to make this, and I'd have to import it and all that, but this is all you would do, and now I would be able to inject it in the constructor here. But it's something to think about when you're architecting these things is how do you want to layout your services, and who wants to reuse those, and if I put the data service here too Dan, if I remember correctly, we'd have a data service there, and a DataService in the app component, we get them both, Yup. We'd actually get two instances in our app. This guy, This guy wins. This customer component gets this particular one. Yeah. If we, once we get to this part, which we'll get to in a little but, yeah, thenâ€¦ Which won't benefit us here right? No. I mean, you'd be, it's one of those, why would you do that, you know, and maybe you do have a good reason. Maybe there is, I can give you one example I can think of, and in the case of this one it just has methods. I don't think there's a big benefit. Maybe you had some state that's going to be stored, and you only want it for this component or lower. And then some other component higher uses the same service, but it has a different state, but you didn't want them getting mish moshed maybe because you want to save one over the other. Exactly. Exactly. So yeah, in essence we'd be creating two data sources here, two singletons, but now it's not my singleton I guess. So we're going to go to this whole provider line. Yeah, so we're going to get rid of that because by adding it up into our APP_PROVIDERS here, we've already imported it. We have the app providers already loaded there, so therefore, it filters down, and we're pretty much kind of ready to rock and roll here. Sweet. So cool. So we're done. The app works? Oh yeah, yeah. Like I said, they're getting really good man, like you don't even have to make the rest call anymore. We're out of the job. That's Angular 3. Yeah, that'll be Angular 3. There we go. So yeah, I mean we're off to a good start here. We've now registered our DataService, we've marked it as you can do, apparently, some injectable things here, and then later we're going to see how DataService can actually go in the component. We haven't put it in the component right? No. I think let's actually do that first. Let's do it. So do I need to put it up here? Actually I still do. I know the first time I ever saw this and I'm like, wait a second, I already imported it in that other file, the providers, but you've got to remember every module is like its own isolated bubble, and so what I'm going to do isâ€¦ Yeah, I can't speak, but by module what you mean is the file right here. Yeah, yeah. This component is a module now. It's a module. This is the ES6 kind of way you do things, and I think it's pretty awesome because, like we said earlier, it's like using statements almost. Yup, and it makes a very explicit contract in or out of this module of what's coming in is being imported, what's going out is being exported. Yeah. So I'll tell you what, how about John, rather than I retype that, that looks pretty good there. You're such a fast typer. I like to change the folder. But you'll notice, yeah, you'll notice that I need to go up a level apparently, so we're going to go ../. Down, up, and in. Yeah. Up, back, in. Okay, so we have DataService here. Alright, now what? Well, now we can actually, because we marked this guy as a component it automatically can have things injected into it. Right. Okay, that's kind of one of the benefits of having this component metadata, so now we can come into here, and I'm just going to say private. And you almost always have something you inject into the pointer right? Yeah, you've got, well, unless I guess your components are doing all the work. Which isn't a great architectural design. Not a good architecture. Yeah, unless it's really, really trim, and it's just UI focused. Exactly. Yeah. Um, so you know, I'm going to make this private really because I don't want to type anymore. So that makes a private instance property on the class? Yeah. You know, that's like doing this right up here, that's like typing that. Okay. But I'm just going to save myself the typing. And it sets it too right? Yeah. It's all, we're all good to go. So it passes it in, it sets it, and it initializes it? Yeah. Pretty awesome. So, well I mean the provider will initialize it, right? Pass it into here. The private, then makes, not only makes a property, but also, as you just said, passes the DataService object to that property. So yeah, save ourselves some code here. So you know, later then, once we actually have data we should be able to come in here and say, you know, this._dataService., and there's our getCustomersSummary. We get Intellisense. And yeah, pretty awesome, and we're kind of ready to roll, so that's all I've got for you today John. Any questions? I wanted to show you the data, but we're not actually going to show it, so.

Subscribe, Error Handling, and Unsubscribe

Using Subscribe Without async

Dan, you built the DataService, you marked it injectable. Yup. You have shoved it inside of this customersComponent class. I've shoved it yes. Pushed it really hard. And you're calling it, but we're not actually doing anything with it yet right? Useless. It's a useless DataService, and we're actually calling it and not returning anything and setting it. Oh, I'm not even doing anything with, yeah, there's no return, there's nothing. So, you know, it's a start, but you know, before we get that going let's see the value of these providers that we were talking about because we mentioned that these are actually filtered down to your child components right? Yup. So let's just see what happens. You know, right nowâ€¦ Does it run right now? Yeah, I was going to say, we ought to try it. By the way, a good test of run right now, like I like to do is I like to put my developer tools up on one side just to see, are there any red thingys floating around in the console window. Yeah. So we could do that. We could come on in and kind of split the window here. Hey, responsive. Responsive design, and we need that with Hello World. You CSS master you. Well, it's more Bootstrap, but anyway, so yeah, let's refresh. Okay, well that's a good sign, but you know, I'll usually go check the developer tools. Alright, awesome. Yup. Okay, but now just for demo purposes let's come on in, let's comment that guy out, in factâ€¦ Don't do it Dan. Yeah, I know. Let's come on in and every time I've saved this is kind of what's happened, so I'll try to leave this up a little bit when we save, and let's save and see what happens, and you know, it's fine, right? Nothing's broken here. It just keeps --- transpiling the TypeScripts. Yeah. So you know, as far as it thinks we're good to go, but now at runtime when the component here says, let me get rid of the left side there, says, hey, I need a DataService, well the injector's going to go, hey, who can provide a DataService again, and it's going to go, no takers? Like, nobody wants to provide me a DataService, and boom. You're asking for something that Angular has no awareness of. Exactly. Because you commented it out. So okay, well that's kind of a bad sign. Hey it still worked. Yeah, kind of yeah, right. The site's still there. Yeah, well kind of. We'll go Inspect here, and oh wow. Lovely. That's a lot of red. Look at that. So let me actually scroll up, and it says, Uncaught: No provider for DataService. No provider for you. It even says who was using it. Right? Customer component. So the customer component was trying to use DataService. Yeah, I know. I don't kind of, I don't know if that's good for when the video goes, but it's kind of hard to read, but yeah, so it even tells you, hey, you're injecting this into the customer's component, Gotcha. but there's no takers on, nobody was willing to create it for me, and so, obviously, that's a problem, but luckily we know how to fix that problem, so we'll go back to the providers. So the problem, if I'm hearing you right, is that the customer component was asking for the DataService, Angular was like, I don't know what that is, Yup. And that's actually what the error says, right? It said, Customer component wants a DataService. I don't know what it is. Yup. Now you're telling it, that's what the providers property in the add component wants to do? Exactly. So you know, it's pretty clear now. I would say the error messages are actually getting pretty good. Let me kind of minimize this. You can see it triggered a whole series of errors. We've got a whole bunch of bad stuff happening now, so let's refresh. Alright. And now we're back. We should be kind of error free. Because we have line 8 on the right hand side uncommented. Uncommented. I've saved, it's re-transpiled, andâ€¦ So what you're telling me is that comments are bad. Well, you know, comments, in the case of providers, are pretty evil actually, so be careful there. Yeah. Cool, so we have our injected service into the component. We probably need to create like a customer's property or something on that component to put it in when we're done. I would think so. Yeah, because right now if we go back to CustomersComponent here, number one, where would I put this? Even if it did return data we could hardcode data, I have nowhere to put it, so yeah, let's come on up here, and what do you want to call it? Customers? Customers sounds good. Alright, we'll do that, and right now we don't really have a specific datatype, and I'm not going to make it in the interface because you saw there was a fair number of properties there. We could, but sometimes just plain old JavaScript is good, so if we do like an any arrayâ€¦ Yeah, let's do an any array there. It's anything. And then we could initialize it just to be empty maybe. Sure. And that way, you know, if there's no customers, at least when it tries to bind it and things we'd have an empty array. Right. And --- there's nothing coming back yet, so there's nothing to set it to either. No. No, at this point, there's not a whole lot coming, we don't even have a way to render it yet, so we don't have a lot going on. Okay. We'll come on in, and we'll do this.customers = our call to GetCustomers, and you'll notice right off the bat it goes, whoa, this returns void. This is an any array, and yeah, but we'll fix it, we'll fix it. Right. Okay, so that's what we could do first off, and so yeah, now we have a customer, customers property we can store that in, and we're able to update that as well if we'd like. Okay, so I don't know, should we start getting data maybe? Yeah, let's go get some data. Data. Alright. So let's go back to the DataService. Now the reason we put this on, and John, myself, the Angular team in general, I think, will kind of recommend that it's just easier to put this on a service. I'm going to inject some stuff, which means we need it, but even if I wasn't going to, like maybe this performs calculations or something, I don't know. Sure. Nothing's being injected. It could be a math class that does add, subtract, which it means it has no injections. Exactly. Then you don't technically have to put it there, but what I've found is that I ended up injecting something it seems like, and I don't want to have to remember to put this back in. Right. So normally I'm not typing this. I'm coming down and doing, I have, you know some code snippets, and I'll come down and do my snippet for my service, and that kind of pops all that in for me, you know, and it makes it a lot easier, but alright, so having said that, now this is ready to take the HTTP object, but if I try to import it we're kind of up a creek right now without a paddle because if we go back to, where's my index? There he is. HTTP is not built into that guy. So it's a separate script that we have to get? Yeah, so I'm going to actually just going to copy this. Now it is already included with the npm that I ran earlier when we talked about npm install. Yeah, when you get Angular itself --- it actually includes the files for everything that you could use, but you only add script tags for the things you want to pull into your app. Right, and so like router for instance. Well, you know, I had to explicitly pull that in because it's not part of the Angular 2 core modules, so we'll come in, and it's just called HTTP. Okay. Now again, we could have gone up to the CDN, but since I'm just kind of doing local development we'll pretend I've got to hop on an airplane, and the Wi-Fi is kind of stinking on the airplane maybe or you're doing an international flight or something. You know, I could still develop. Sure. And that is important, because we want to be able to develop while we fly. We don't talk enough about that. We really don't. That could be a course. We should do a play by play on an airplane. Development on an airplane. How to check in for other passengers. So we've got this script, and this is going to give us functionality for HTTP? Right. I assume there's going to be like a service? Yeah, so we've got a little more to the story. It's kind of like in our app.providers here we had to provide you know, DataService or ROUTER_PROVIDERS is kind of the giveaway, so we could come into here, and we can do whatever that was. An imprint. An imprint, and I'm going to use the snippet in this case, and what do I want? Well this one's called angular2/http, so again, I go back to, you walk in this massive library, and you're like, hey, I need the book in that section of the library, and this is like the section of the library right here, and then the book I need is Http, but not Http here. We want something called PROVIDERS, and notice I'm actually getting some code help. So we're going to use those providers, and I assume we're going to put that in the APP_PROVIDERS? Yup. Now we're going to throw that in there, so we'll just throw that right under. And this is definitely one of those providers that you want to add at the app level if you're going to want HTTP throughout your entire app. Yeah. I suppose if customers only wanted HTTP functionality we could provide it just on the customers, but you know, I doubt you're going to use it just in one. Yeah, it's very common. There's very edge cases where you might want to do it at lower levels, like you want different components to use HTTP in a different way. Maybe a set of different headers and service settings, and all that stuff. In general, most of the time you're going to do this right at the top level. Yeah, yeah. So pretty easy. I mean once you know about how these providers work, a lot of the providers you'll probably register at the top, you know, some of them maybe not, but it's pretty easy once you get this set up. I don't really even type this much anymore because I'll just take one of my starter projects, kind of like we have, and just use that as the base. Right. So Angular is now where the DataService, HTTP providers, the router providers, right at the top level. Now how do we use it? Alright, how do we use it? So let's go back to data.service. So now I can import, so we'll do the import little snippet here again, and this is the angular2/http again, and we've already provided whatever is available actually. It's not necessarily just HTTP. It provides any of the stuff associated with HTTP I can get to, but I just need that guy. Okay, so we're going to get HTTP. Now same thing, as we injected the data service, if we go back to the component here, you know, we injected that right there and stored it right? Well, we're going to do the same type of thing here. I'm going to come on in, and I'm going to make, I typically want this private. The type is HTTP, which is what we imported, of course, and now we're off and running. Now instead of the lovely get my data comment we can come in and start to use HTTP to do something. Before we do that Dan, can we just see if we have a runnable app? I know we have the error back in that one component. Can we comment out the one line of that? Let's see. let's first do this because normally I'd have two monitors up, and see what we have going. So okay, we don't. That's right, that's the void. That's the void here right? So yeah, actually that one's not going to work I forgot about right here. We'll just comment them out because we are going to use this later. Yup, we will get back to this, but let's go back, and looking good. It's always good to check to see if you have compiles, and then runs. Yeah. Minor detail. Otherwise, you're like, why is this not working? Well, especially since we're adding a lot of little bit of code, not a lot of code, but a little here, a little there, a little there, let's make sure it actually still functions. Yup. And then we can reduce the chance of us making a bug, and not figuring out over the last 7 hours, you know, what have we done? Yeah. I always joke, compile often or, in this case, check your tsc often, and normally I'll have two monitors up. And if you're using get commit. Commit often. That's right. Yes. When it works commit. Yeah, you don't want to delete the whole company or something. Okay, so we have HTTP, and we don't have any errors there. Now what if we went back to that customer service, the DataService you created, and we commented out the add injectable? Ahh, let's try that. That is a good demo to show. Like if we had forgotten that what would the error be? Yeah, now first off down here you'll notice that the TypeScript compiler is like, hey, that's cool. It compiled because there's nothing wrong with, you know, it could find all the references. Yup, but if we go back to here, hmm, loading sure does seem to be hanging around. I know it's an async process, but that's ridiculous right? So we'll go to inspect, and okay. So we get some lovely red. Let me zoom this for our purposes. Make sure that all perimeters are decorated with Inject or have a valid annotation because, Dan, you forgot to decorate DataService. I know. I'm an idiot. It actually says the name of the thing you're missing, Injectable. DataService is decorated or make sure it's decorated with Injectable. How cool is that? I mean, it's like, okay, that's pretty clear. Yeah, the error messages really are getting better, and better, and better, so it'sâ€¦ It'd be better if you could click that or bring you to the file and write the code for you. That would be pretty awesome. That would be cool. Alright, so let's take that out. We'll go back. Let's just make sure we're running again. Hello World shows up again. Hello World. I tell you, this is why everybody's watching, they want to see Hello World.

Handling Errors and Unsubscribing

So we have HTTP, so let's do something now. So remember back here the goal was we want to call the dataService, get the customers, and then do something with them. Yup. Alright, so let's go back to data.service. So now getCustomersSummary needs to return something, alright, and so we're going to come into here, and I'm going to return something, but you know, what? Well we're going to do this. We're going to say, this._http, and I'm going to do a get request. Now you'll notice I'll zoom that just a tad here, that you can do kind of the standard suspects here right? You've got your get, your post, your put, you know, you even have the patch, I think I saw in there, yup, patch, and stuff like that, so kind of your standard things that you need to call a RESTful service. We'll do get, and then I need a URL, so let's do this, just to make it a little bit more clear. Let's say that we had a private variable up here, we'll call it URL, it's a string, and then we'll come back to that, and I need to go get that again, because I don't remember the, I think it was 3000, but we'll get that. So the URL's going to go here, so this._url goes here. Yup, and you might have like a set of constants with a bunch of different URLs in a larger op. Exactly, exactly. In fact, that'd be a good example where we might actually inject another type of service that it just provides, so nice. Sure. You could have a service that just gives you the URLs because maybe they're different in environments too. Different environment variables and all sorts of cool things. Yeah, down staging, production, yeah. For sure. For now we're hardcoding. Yeah. For now we are. Explicitly configuring. That's right. We don't hardcode, we explicitly configure our code. That's right. That's a new thing everybody should use. You're not hardcoding. That's great. So when we mouse over the get, like what do we get? Well, it looks like an observable response. What do we get with a get? Okay, like what do they mean by an observable? Yeah I was expecting a response. Yeah, you would expect that. Asynchronously, so observable is what? Yeah, so you know, that's a good question. I was hoping you'd tell me, but. That's all the time we have. That's all the time we have folks. Yeah, so you know, a lot of us are used to promises where you have an async process that runs, and the promise then returns or resolves I should say, and then you get the data. Well, observables are even more powerful than promises. Observables are used to actually say, hey, I could have, now with this example we won't, but I could have a series of a stream of data coming in, so you know, the best example I can think of is websites because, you know, they're pretty cool, and you might have like SignalR running or Socket.IO or one of those running where you're Angular app is actually giving me a stream of data that the server is pushing. Well, promises in that world, you know, they kind of get the data, and then they shut down. Right. And they're done, and you can't cancel that. Once it's done it's done. Observables, probably the easiest way to explain it is they're really just an array of items that might come in the future. Like you haven't seen them yet, but you know you might get a sequence of items. Now obviously for a get to a HTTP call you're going to get one item, right? We're going to get back that customer summary data, and we're going to call it good. Okay, but you could use this for other scenarios where you do get the sequence of data, and because it's an array we can now use some of the array type functionalities, some of the functional programming like map, and reduce, and filter, and stuff like that, which we're going to do map. Right, we could get a bunch of calls, like we could with promises, and then like aggregate those, and maybe do a flat map on them. Yup. We can cancel with Rx if it calls over there. We can cancel, yup. We could retry after a certain duration. Yup, we can delay, just in case you want to screw up another developer. That's a great tip, by the way. If you ever want to look like a hero in your company, right, you go and you put a delay of 5 seconds on every HTTP call. They call you, Dan, this is slow. You come in. Let me fix that for you. And now it's instantly fast. It's like, you know what, I will take care of this tonight folks, like let me, I'll use my own time to fix this. Yeah, don't try that at home because you mightâ€¦ We are kidding right. Yeah, don't do that. Don't do that. You'll probably get fired, but anyway. Yeah, did everybody sign the disclaimer, by the way? So alright. So we've got a get, and we've got a URL. We're going to get back this observable. Yup. What do we do with it? Yeah, so the observable could be an array of items, and so we're only going to get back one, but it is technically an array of items, just an array of one. Okay. So what we need to do is map that item into the actual to get the data, so I'm going to say, map, and then inside of the map here we'll get back some type of response, and you can actually type this as a response if you want. So response is something that comes from HTTP as well? Yup, that comes from HTTP, so notice I'm having to make sure I import it because you only get what you import, nothing more, nothing less. So that's a lambda I'm assuming you're typing. Yup. Where you're function is accepting in response, and then you're going to execute some code to pull the data out of the response. Exactly. So we're going to go in and make it so that within ES6 terms it'd be an arrow function or a fat arrow syntax you'll hear, but yeah, if you come from like a .NET background, then we call it a lambda. So very cool, and what I need to get, in fact, I'm going to do resp for response, make it a little more obvious, I need to get, you'll notice I actually get some nice little helper here. Nice stuff in here. So most of those are properties, but we've got a json or even a text function. Exactly. So you could run a JSON on there, I assume, and say, give me back the JSON out of this thing. That's right, and that's exactly what we're going to do. Now this, you know, there's rumors going around that this may be cleaned up even more, so we'll see how it goes down the road, but as of today this is what you do, and then we could also add a catch block if we wanted onto there. Okay. We don't make any errors though do we? No, never. But you normally can have a catch for exception handling. Yeah. So we still, the .get returns an observable. Does the map change the response? If we hover over getCustomersSummary we should still have an observable ofâ€¦ Observable of any. In this case, it doesn't know what we're getting back, which is fine for us right now. It's fine for now, but we could, if we had a TypeScript interface, we could go in, we could import observable from the RxJS module, that's a different one, and we could actually, you know, say, hey, I want an observable. It could be like an observable of a customer array orâ€¦ Of like an I customer or if you had a customer object you could do that. Right. Or a customer array in our case. Or array in our case, yeah, yeah, yeah, that's right, because we're getting back an array. So that could be the case. In our case we're not going to have a customer type object, an actual model or an interface right? Yeah, yeah. We don't have that, and so we're going to just kind of leave the default, but really what it's doing is this. Yes. But without me having to worry about importing or making a separate line for the observable. Yeah, it implicitly knew that it was an observable of any right? Yup. The any is anything, so it really depends on what you want to do, and that type of data. Now I would offer that in a real life app. Yeah, I'm probably going to be pretty keen on let's either, A, cast this, so it knows what it's getting or B, put the type because now if you subscribe to it you're going to get back, the raw data. You know what you're getting. Yeah, so you get Intellisense and all that fun stuff, so it's a lot better, but you know, we got a good start here. You've got to start somewhere right John? Yeah. We're going to create, and later on we can create a customer model, and that's how we do it our _____ phase. Yeah. Exactly. So you can see it seems like we're doing pretty good down there. But it's bugging me we have no URL. We have to have a place to go. Oh yeah, man, you know, I wasn't too worried about that. I mean come on man. Yeah, in fact, let's go back because I don't thinkâ€¦ Is Postman still running? I think I closed it. I should not have done that, but I did, so let's open it up. But you did save it I believe. I should be in here. Yeah, so customersSummary is right there. Let me go full screen on this guy. Make it big. Let's just make sure this is still working. Sweet. Okay. Yeah, so we're just going to grab, now I don't really need all that because, in this case, I'm on the same server, so we don't have to worry about cross CORS, and all that fun stuff. Sure. So we'll just kind of do a relative. If we did we could actually pass headers into HTTP as well, right? Right. Or other arguments that we pass. Other things. Yeah. HTTP you can get to, in fact, let's try that real fast because I've had to do that recently for something. When we come in and do the get and all this fun stuff, you can also come in and do a, what's it called, request Options I believe it is, and you can set things like custom headers or maybe there's a no auth token or something that you need every request to have, and you could do that kind of stuff too. Right. You could do that on a request basis. Yeah, yeah. Alright, so yeah, we now have the URL, I'm trying to think if I want to do that. I don't think it should matter in this case because it's from the root anyway, but we'll try it and see what happens. So the service is happy. Now we need to carve the service from the component? Yeah. So it's already, I think, being called, we just haven't really wired it up to anything, so actually we have. Let's see what happens here now. It's red though. You'll notice this is not right, and it's because it wants an observable of, what was it, any, I think? Just a plain any? I think just a plain any for right now. Any, okay, right there, so kind of our options here are A, we can go import this observable of any, which means we need to import it, and I always forget this one. You remember it off the top of your head? Come on, you just did it today, but it'll be observable. That's going to be in the Rx library. Yeah, I always forget the case on this one, but we'll find it. It's like rx something. Let me see if I have my other project open. I don't, but. I found it here. I've got an app. You got it right there. It's rxjs/Rx, yeah the loud is capital. Rx. Yeah, so that one, yeah, that one's a little hard to memorize, but. So we're saying, pull an observable there, and now you're going to tell me that this is going to be an observable of any? Yup. let's make an Observable any array because that's just that's what it is right? Yeah, we can do that. And then we're no longer initializing it to an array anymore, so we get rid of that. So what do I like here? On the end. Oh, yeah, yeah, yeah, yeah, and it's observable. And I think we had a colon instead of an equals after customers? Good eye, yeah. I'm slipping here. So now it's the colon says the type is observable of any array, and now it's happy getting it back, but now we're not getting back a customer array anymore, we're getting back an observable. That's right. So right now we don't have anything really good going on because you have to, an observable is future data, you don't know when that data's going to come, so normally you would subscribe, but let's say if we can just get some stuff going. So we could test this right now by saying, does it transpile, does the browser still render without an error, and then we could actually look in the network tab of the browser, and we should see if the data's coming. Yeah, see if it's making an Ajax. Yeah, man, that's a good idea. Let's try that, and that's always a good thing to do toâ€¦ Incremental testing's not a bad idea. No, I'm with you there. So let's see, okay, so we got it, that's good. We got Hello World, step one. Any errors? Oh, we do have errors. We do. http.get map is not a function. Oh, we didn't import it, yes. So map is an operator in RxJS, and we didn't import it anywhere, so one of the easy things we can do is we That's right can do is we can import map by itself or we can just go up to the root there. Oh yeah, we could do it there too. Any way you go, and we can just import what we want to use. So this one is actually a longer one as well. I guess I can do, I haven't tried star, butâ€¦ We could actually just do import rxjs/ go to the from even. Oh yeah, yeah, yeah. That's right, that's right. You can just import the whole file. Now it gives you everything, and honestly, in a big app you might not want everything, It's not as efficient. you might, for now we're saying, just give me everything out of RxJS. Otherwise, again, this is one of those syntaxes I don't have memorized, but it's a little path looking syntax where you can say, I want rxjs/ something. /operator/map. Yeah, I think it's operator actually, I think you're right, /map, I think that's it. Something like that, and then from rxjs, it's something like that that's close. So anyway, or it might even be just that I think right here, but anyway. Anyway, we won't worry about that. We'll undo, we'll go back, and we'll leave that guy. Okay, now as John just mentioned. I would probably not want to import the entire Rx library right here, but we'll see if we can at least get our map going here. Okay, no errors, so we're good there. We'll hit the Network tab. I did hook it up, it's actually rxjs/add/operators/. You know what, let's actually do it then, let's be more specific. I'm uncomfortable here John. I want to be uncomfortable because we're importing everything. You were darn close Dan. It's import rxjs/add/operator/map right? Yup, so we've got the operator map in our studios, who forgot the app part. Yeah, if you're wondering why you're like, why can't I memorize that? Well that's why, because it's not exactly super intuitive, and if you worked for a tooling company this would be a wonderful thing for them to automatically add when we use map. Yeah. As soon as you type .maps, like would you like to add? But we knew this was problem because your error message in the browser said, I don't know what map is. Yeah, it was very explicit actually. Very explicit. So yeah, let'sâ€¦ So why don't they give us everything right out of the box? Well, you only want to load what you need. Right, you don't want to be loading 20 MB of data right? Exactly, and the more imports you do, then the more it's loading to memory, but if you don't import everything. You know, we could have done the import RxJS, and that would have given us everything, It certainly would. Observable, map, flat map, reduce, you know, all that delay, all that fun stuff, but I'm not using it, so why, why put it? Okay. So now that we solved the error the network tab should show us some data coming across right? Yeah. So let's go to actually xhr here, and let's see what we got. And I'm actually not seeing that guy. Okay, and I think it's because we're not binding it to anything yet. That's a good point. So we have an HTTP call. That's not hot yet. Yup. Which is supposed to go across the wire. Your ngOnInit is calling it kind of. It's actually not calling it though right? NgOnInit says, and not in here, but the component. Yeah the component, let me go back. He says, go ahead and call getCustomersSummary instead of to customers, but nobody's actually listening. That's right. So if nobody's listening, then RxJS is smart enough to say, don't bother. Why even do anything? That's right, and so in this case, although, I'm used to the subscribe, which is why I actually was expecting, but then I realized, oh yeah, we're not subscribing to anything. Yeah, we don't really have anything we can do with it. So is this like that analogy, if a tree falls in the forest, if nobody's there to hear it does it actually make a sound? In this case, it doesn't actually make a sound. Yeah. No sound, no error, no foul, no harm done.

Conclusion

So how do you listen to this thing? Okay, now in this case, now we're going to look at the subscribe probably to wrap up, but let's look at kind of a simple way we could do this first, and that would be, you know, we're going to come into Hello World. Let's get rid of that Dan. Yeah, let's do like an h1, we'll say, you know, Customers. And do you have a snippet? I think you have a snippet for ngFor actually. Oh I do, actually, I do. I don't think it does the ul though, but yeah, I can do a2 for, and there we go. And you would put that in the li there don't you? Oh geez, yeah. So I tricked you. You did trick me. You told me to do it too soon. Knock it off. I did. I should have done then, anyway. I was being dumb on my typing there. Right, because it could have auto-typed there. Yeah, it looks like Emmet tabbed it. I think Emmet's the thing that automatically types the HTML. But anyway. Yeah, so we'll do li, and then I can do for my snippets it's a2, and then John has some really nice ones too. It's ng2, is that right? Yup, and we get either one of these from the Visual Studio code marketplace. Yeah. They're free. And they're all free, and you can install both at the same time, and there's even some differences between them, but this one's pretty similar I think. So this has a directive called ngFor, and this is a structural directive. It modifies the DOM, that's what that little star is. NgFor sounds like we skipped Angular 1, and 2, and 3. NG4. Hey, we got a better framework. I'm going to write down NG4 man. Come check out our framework. It's 2020. So let's say for each customer of, and then our property was, I think, customers, if I remember right. Yup. And that'd be our li, so and now we might want to write out a few things here, so let's go ahead and we'll wrap that guy there. So what this is going to do is basically, you know, create a template. It's very similar to ngRepeat in Angular 1, and we'll create this template here, and just to get something going because I'm a big fan of let's just start small, get something. Right. Let's come on in, and where there's one thing, we've got to do one other thing to make this work, but I'll come back to it. We're going to say customer., and I think the case was firstName. What if we didn't know the property? Could we just do customer JSON, like _____pipe? Yeah, yeah, yeah. Actually we could. We could pipe it. Yeah. Because that worked in Angular 1, so we could pipe to JSON. Type to JSON. And then we could figure out what the properties are right in the browser. Yup. Fortunately, hopefully I left it up, we have Postman, and we have first and last name. So we should see that data basically? Hopefully, yeah. So let's start with that, so we'll keep that. But you said this wasn't going to work. What else do we have to do? Yeah, we've got a little problem here I'm anticipating. So let's do, you know, firstName, ah, let's just do it this way, and we'll do customer.lastName, oops, case matters, lastName right? Let's go ahead and save it, and let's see what phenomenal bulleted list we can get out of this. Because you're getting an observable of customers, and now you're looping through those here. Exactly. Or so you think. Well, yeah. Maybe not. So let's run it, and I actually got a pretty nasty error here, and, Cannot find a differ supporting a differ supporting object of type 'object'. NgFor only supports binding to iterables, such as arrays. Well, we don't have an array. We have an observable of an array. We have an observable, which is ultimately an any array under the covers right? So how do we get out of that observable? Yeah, so an observable, we don't know when it's going to return the value right? I mean, it could be 10 ms, it could be 50 ms, who knows. So we could pipe this, and there's a little pipe here called async. So it knows it's going to operate asynchronously, and that we'll pull the data into the customer's ngFor as it needed? Yeah. Basically, hey, when the data's available, but not before, then go ahead and write out these customers. Cool. So this does work with promises or with observables. So this should work? I don't know. No guarantees, but let's see what we got here. Bam. Oh, nice. Alright. First try. Nice. High five. High five. Well that wasn't really the first try, but you know, close enough right-who's counting?

Providers and Observables

Overview of Providers

Dan, you just made an async pipe, in the ngFor inside of the template, and you said, you kept on saying over and over again, you were teasing me, that there's this thing called subscribe. Yeah. But you didn't use it. No, we didn't use it. So we kind of took, this is one way you could do it, and I think this is definitely, if you're just getting started, a very simple way, but yeah, let's see if we took out the async here because keep in mind, that only works if the property is either observable, the customer's meaning, or is a promise. With the async it means that. With the async. Yeah, right, so now it's wanting just a regular array. Yeah, now it just wants raw data, which we currently don't have because we saw that it's an observable, so let's come on back to our customers.component, and this code right here is actually not what we want, right? Okay. We want to just call it, but this returns an observable, which is kind of like having a publisher that you want to subscribe to their magazine or something, alright? Okay, so subscribe to this magazine for me. Alright. So we'll come in, and we will subscribe, okay, and then the data that I'm going to get back, well, right now you'll notice that the observable of Next, and it doesn't really give me a whole lot of info here. Yeah. So we need to be able to, when we do the subscribe, we need to be able to get to the data. And I think I see in there one of the possible options is a value of any, which returns void, so it's basically a function, so we can embed a function in here. Yeah, yeah, and we can do it like a lambda type operation if we'd like, so we can come in. Will it give me data? Well, we hope. So we're going to do data here, which we could type as any I suppose, if we want, but there's not a whole lot of reason in this case. Any is implicitly what it is. Exactly, and then we want to take what we hope is a customer array, well we know it is, it already worked with the observable earlier, and we want to say, this.customers = the data that we have there. Okay. And our customers property on line 12 is still an Observable of any, so there's no more observable right? Yeah, that we're going to have to change to like an any array I guess, since we don't really have anything. And initialize it, so we have something to select. And then initialize it, so that yeah, the initially doesn't error out on us. So that line really didn't change a lot. We removed a tiny bit with the type there, and then line 18 was entirely new, so instead of setting it on the left hand side like it was synchronous, Yeah. because it really isn't, That's right. so instead of setting it to be synchronous or at least looking that way, instead we're saying, look, there's going to be some kind of callback and subscribe to do this, and in fact, just to correct myself there, line 17, if we did say customers = the customersSummary it is actually synchronously getting the observable, but not asynchronously yet getting the product. Right. Processing is where we're at. You're getting set up to receive like a conveyer belt of items, but the conveyer belt hasn't started yet. An observable, you can almost think I just kind of made that up, but it is. A conveyer belt. It's like a stopped conveyer belt, but as soon as you turn it on, and data starts coming by you, by you, by you an observable would let you pull off those conveyer belts labs. It's like that old Lucille Ball show where they've got the conveyer belt, and she's on theâ€¦ Yeah, yeah, yeah. I got you. I used to love that actually. Yeah, yeah, yeah. Nobody has any idea what we're talking about. No, no, no, no they're yeah. Alright, so yeah, what we're going to do is when this inits we're going to come on in, and call get summary, getCustomersSummary. We know that returns an observable. We can mouse over that, and kind of see that, and I think it's chopping it actually, but and then, I think I'm in zoom that's why, and then we have a subscribe that we're going to do, and that will get us the data. Now if this were a kind of real world app, as we talked about earlier, I would have probably had either an interface or a type or like a class that I would have filled with the data or I would have just said, Sure. hey there's this interface, and it has firstName, and it has lastName, and it has, you know, whatever it is. I mean, we could have made an interface that just had firstName lastName and the others would have been just no big deal because then you would get Intellisense. You know, it's much better, obviously, if I had said, I'm getting back a customer array or if it was an interface, an iCustomer or something like that. Yeah, and then if you hovered over getCustomersSummary it actually would have told you if we did a customer object that look, this isn't just an observable entity, it's observable of a customer entity. Exactly, and then you're going to know Intellisense what to do. Or a customer array. So I'm guessing that the async pipe was actually handling the .subscribe for us in this case right? Exactly. Yup, that's exactly what it does. So it subscribes to the observable. It just kind of sits there. The conveyer belt stopped. As soon as the conveyer belt starts it goes, oop, I have data, okay, shove it into the ngFor, and then the ngFor does the rendering. I'm dying to know, if you run is this going to work? Yeah. I don't know. I don't know. Let's see. Pressure's on. Only a million of your favorite most faithful friends. Hold on, hold on. That's, yeah well. Checked his compiler, checked his browser. So let's run it, and alright. And it ran and eloped. Let's go, you know again, if we go over to network here, now we should see customersSummary now. We see, we would have seen that with async pipe by the way. Click on that for just a sec, just make sure we see actual JSON, and there it is. There we go. We have our data, and we can drill into the data, and we're obviously showing just firstName lastName, but we could show whatever we wanted.

Working with Observables

Alright, and there you have it. So there's kind of a start to end, how do we, you know, get a service going? Services are pretty simple I think. What's that whole injectable thing? What are providers? How do we get it in? What's the role of HTTP, observables? Quite a bit of pieces to understand, but honestly, I think you'll agree John, that once you understand how the pieces work, and you know, you have the Yeah, not so bad is it. lightbulb moments that go I call them, then I think you go, oh, well this is like a broken record. You know, once you show me this once, you know, let's say that we made another component, it's the same thing. I can just process the data differently. And we showed earlier on the service we could do a .catch after the map if we wanted to. Yeah. Here, actually the second parameter to subscribe is the catch. That's right. We could write another lambda inside this subscribe if we wanted to. Yeah, or you can put it, if you put it after, I think you put it after two. I'm not sure on that. On here I think you can also do, there's the error. Yeah, you definitely got the error. You get your error for a catch. Get your error. They could have another lambda and catch it, which we would highly recommend. Yeah, and really the way I do things is in the service I do catch. I log the issue. Yup. Right there because that's the lowest level, right, and then I also then rethrow the observable error back up, so that way the component knows something went foul. Yeah, because if you don't do that, yeah, I'll tell you what. Let me just real quick here, let's just show that real fast. I'll go open up some code because this one's a little bit that I always have to look up anyway, so let me jump into a service that has that, and we'll just kind of we'll steal from the code here. Yeah, because you want your service to catch the errors, handle them in a nice way, but not swallow, so it will handle the error, you're using a catch, that's great, but then you want it to observable throw it because the component needs to know you have something bad, so then it can decide how to tell the user. There's two jobs there. One job is a service has to handle the error and log it. Yup. And then the UI piece, which is the components closest to it, asks the handle, what do I tell the user? Exactly. Exactly. So I just grabbed some code that I had from another project, and even the imports, since their a little tricky to memorize, but now instead of just map we're also going to import the RxJS operator called catch, and now we also need observable it looks like, so we'll go ahead and do that real quick. We'll see if I can remember what you told me earlier, and I think it was RxJS/Rx, Yup. If I remember right, and now that error goes away on the observable, so what Java's talking about, and we'll add this real quick, so we'll say .catch(this.handleError), is now if we do have a problem when it comes back, we're going to kind of redirect or reroute the error to this handleError function. That gets an error, in this case, that's anything. We're going to log it, I do want to know that. And we probably log it somewhere besides the console. Yeah, I would hope, in a real app. Like some backend, somewhere you can actually track it. Yeah, I totally think like my mom or something, you know, she would totally know. She'd love that. Go to the developer tools and tell us. You know. Can you imagine on a help desk call? But anyway, the Observable.throw is what he was mentioning. This is actually really important because if you don't, then the subscriber, what happens, you know? Yeah, he has no idea. The subscriber just thinks things are fine or peachy in some cases. So now we're not telling the user what's going on here. We're doing this more for tracking or monitoring, right, but in the component, then, we could also do a similar kind of thing, and actually maybe display a nice little box to the user, hey, you may want to go tap on your admins shoulder and say, I got an error. Yeah. Yeah. At least they get something. You know, and of course, if you have the whole logging service setup on the server-side you can make an Ajax call back, but. Okay. So alright, so there be a simple one. Let's see where we're at. I think everything's saved. I think this should not affect anything we hope, and alright, there we go. We still have our little API going. We have customers, we have observables, we're being a little more official. Now one thing with observables we might want to at least mention is when you come back, you know, in the init we subscribe, you can also unsubscribe. Yes. Alright, soâ€¦ Otherwise you're hanging onto a reference forever. You're right. But. But, go ahead with the but. With the but. With the but. So it's my but? Yeah, you lead with the but. Oh thank you. So the but here is that normally if you create your own observable you've got to subscribe to it, but you want to unsubscribe before you get out of the component, which means we'd have to do like an ngOnDestroy. Right, ngOnDestroy it's called yeah. But with HTTP it actually cleans that for us. It does. And that was what I wanted to point out is, luckily here we don't have to, but we could have come in, and done an OnDestroy, and then this actually returns a little object that we can then use to unsubscribe. We could create a local variable or, you know, private variable on the class, then say, myprivatevariable.unsubscribe, and it would get rid of the OnDestroy. Yeah, so kind of lesson learned there. If you are doing custom observables you want to make sure you clean up; otherwise, it's kind of like having an event handler that never got cleaned up, and it could create a memory problem. The nice thing is you get into observables in Rx and you don't have to really learn all that stuff right now. You could just use it for HTTP, and you don't even have to know it did that because it cleans up for you. Yeah, it has a nice clean up service built-in. Even if you did the async pipe it still does it.

Creating a Listener

Well Dan, this was fun. We got to put together an Angular 2 app or extend an Angular 2 app that talks to a backend database, and we could do this for Node, PHP, Ruby, whatever your favorite backend is right? Totally. Yeah, I mean if we wanted to pull up ASP.NET web API it would be the same exact Angular app, and literally we wouldn't have to change a single thing assuming that the backend returns the same format of the JSON. And even then it'd be very minimal. We'd have to change, what, the ngFor, potentially, section where we wrote out the firstName and lastName. Right, and the properties or bindings, and that's where a model would help us or an interface, so we knew exactly what that contract was for the list of customers that we had. Or we get them back, exactly. So yeah, so it's fun stuff. You know, like we said, it takes a little bit of practice to get started with it, but once you get down the general concepts of what a service is, and how HTTP can be used you can be super productive with it. That's what I love. Yeah, I do too, and using Rx with it, again, it's not part of Angular, but it makes it easy to kind of get this data, and it's got those extra features that we like, but even though it's got all that additional power you don't have to use it, you can just use, like we used the map, and we used observable and subscribe, and that was it. Yeah, that's pretty much it. But, you know, you can go certainly much deeper, and it's kind of up to your app, and what you want to do, and you know, if you wanted to say, hey, I just want to go straight and return a promise, that's even possible to do with this if you wanted to. And if somebody wants to get the source code to what we built here we'll push that to a GitHub repo under Dan Whalin, github.com/DanWahlin. Slash DanWahlin. Yeah, we'll pump that up there, and if you want to get to this code you'll certainly be welcome to do that, and they can probably find that at the link right here. Right there. It's like right there. Thanks for coming Dan, appreciate it. Hey, thanks for having me. That was good to talk with you.

Course authors

	
John Papa
	
Dan Wahlin
Course info

LevelBeginner
Rating
(137)
My rating
Duration1h 33m
Released8 Sep 2016
Add to playlist
Share course

